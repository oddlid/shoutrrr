{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Shoutrrr <p>   A Go-based alternative to Apprise used by Watchtower. </p>"},{"location":"examples/home-assistant/","title":"Home Assistant","text":""},{"location":"examples/home-assistant/#overview","title":"Overview","text":"<p>This example demonstrates how to configure the Shoutrrr <code>generic</code> service to send notifications to Home Assistant via its webhook API.</p>"},{"location":"examples/home-assistant/#usage","title":"Usage","text":"<p>Configure the <code>generic</code> service URL to target Home Assistant's webhook endpoint. The URL requires the Home Assistant IP address, port, and webhook ID.</p> HTTPS (Default)HTTP Generic Service URL for HTTPS<pre><code>generic://&lt;HA_IP_ADDRESS&gt;:&lt;HA_PORT&gt;/api/webhook/&lt;WEBHOOK_ID&gt;?template=json\n</code></pre> Generic Service URL for HTTP<pre><code>generic://&lt;HA_IP_ADDRESS&gt;:&lt;HA_PORT&gt;/api/webhook/&lt;WEBHOOK_ID&gt;?template=json&amp;disabletls=yes\n</code></pre> <p>Note</p> <p>Replace <code>&lt;HA_IP_ADDRESS&gt;</code>, <code>&lt;HA_PORT&gt;</code>, and <code>&lt;WEBHOOK_ID&gt;</code> with your Home Assistant instance details. In Home Assistant, use <code>{{ trigger.json.message }}</code> to extract the message from the JSON payload sent by Shoutrrr.</p>"},{"location":"examples/home-assistant/#example","title":"Example","text":""},{"location":"examples/home-assistant/#send_notification_to_home_assistant","title":"Send Notification to Home Assistant","text":"<p>Example</p> Send Command to Home Assistant<pre><code>shoutrrr send --url \"generic://192.168.1.100:8123/api/webhook/abc123?template=json\" --message \"Hello, Home Assistant!\"\n</code></pre> Expected Output<pre><code>Notification sent\n</code></pre>"},{"location":"examples/home-assistant/#send_notification_with_http_and_verbose_output","title":"Send Notification with HTTP and Verbose Output","text":"<p>Example</p> Send Command with HTTP and Verbose<pre><code>shoutrrr send --url \"generic://192.168.1.100:8123/api/webhook/abc123?template=json&amp;disabletls=yes\" --message \"Hello, Home Assistant!\" --verbose\n</code></pre> Expected Output<pre><code>URLs: generic://192.168.1.100:8123/api/webhook/abc123?template=json&amp;disabletls=yes\nMessage: Hello, Home Assistant!\nNotification sent\n</code></pre>"},{"location":"examples/home-assistant/#notes","title":"Notes","text":"<ul> <li>Webhook Setup: Create a webhook in Home Assistant to obtain the <code>WEBHOOK_ID</code>.</li> <li>Template: The <code>template=json</code> query parameter ensures the message is sent as a JSON payload.</li> <li>Accessing Message: Use <code>{{ trigger.json.message }}</code> in Home Assistant automations to retrieve the message.</li> <li>Credit: Example inspired by @JeffCrum1, Issue #325.</li> </ul>"},{"location":"guides/proxy/","title":"Proxy Setup","text":""},{"location":"guides/proxy/#overview","title":"Overview","text":"<p>Shoutrrr supports proxying HTTP requests for notification services, allowing you to route traffic through a proxy server. This can be configured using an environment variable or by customizing the HTTP client in code.</p>"},{"location":"guides/proxy/#usage","title":"Usage","text":""},{"location":"guides/proxy/#environment_variable","title":"Environment Variable","text":"<p>Set the <code>HTTP_PROXY</code> environment variable to the proxy URL. This applies to all HTTP-based services used by Shoutrrr.</p> Set HTTP_PROXY Environment Variable<pre><code>export HTTP_PROXY=\"socks5://localhost:1337\"\n</code></pre>"},{"location":"guides/proxy/#custom_http_client","title":"Custom HTTP Client","text":"<p>Override the default HTTP client in your Go code to configure a proxy with specific transport settings.</p> Configure Custom HTTP Client with Proxy<pre><code>import (\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n    \"time\"\n)\n\nproxyURL, err := url.Parse(\"socks5://localhost:1337\")\nif err != nil {\n    log.Fatalf(\"Error parsing proxy URL: %v\", err)\n}\n\nhttp.DefaultClient.Transport = &amp;http.Transport{\n    Proxy: http.ProxyURL(proxyURL),\n    DialContext: (&amp;net.Dialer{\n        Timeout:   30 * time.Second,\n        KeepAlive: 30 * time.Second,\n    }).DialContext,\n    ForceAttemptHTTP2:     true,\n    MaxIdleConns:          100,\n    IdleConnTimeout:       90 * time.Second,\n    TLSHandshakeTimeout:   10 * time.Second,\n    ExpectContinueTimeout: 1 * time.Second,\n}\n</code></pre>"},{"location":"guides/proxy/#examples","title":"Examples","text":""},{"location":"guides/proxy/#using_environment_variable_for_proxy","title":"Using Environment Variable for Proxy","text":"<p>Example</p> Set Proxy and Send Notification<pre><code>export HTTP_PROXY=\"socks5://localhost:1337\"\nshoutrrr send --url \"discord://abc123@123456789\" --message \"Hello via proxy!\"\n</code></pre> Expected Output<pre><code>Notification sent\n</code></pre>"},{"location":"guides/proxy/#using_custom_http_client_in_go","title":"Using Custom HTTP Client in Go","text":"<p>Example</p> Send Notification with Proxy<pre><code>package main\n\nimport (\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n    \"time\"\n    \"github.com/nicholas-fedor/shoutrrr\"\n)\n\nfunc main() {\n    proxyURL, err := url.Parse(\"socks5://localhost:1337\")\n    if err != nil {\n        log.Fatalf(\"Error parsing proxy URL: %v\", err)\n    }\n\n    http.DefaultClient.Transport = &amp;http.Transport{\n        Proxy: http.ProxyURL(proxyURL),\n        DialContext: (&amp;net.Dialer{\n            Timeout:   30 * time.Second,\n            KeepAlive: 30 * time.Second,\n        }).DialContext,\n        ForceAttemptHTTP2:     true,\n        MaxIdleConns:          100,\n        IdleConnTimeout:       90 * time.Second,\n        TLSHandshakeTimeout:   10 * time.Second,\n        ExpectContinueTimeout: 1 * time.Second,\n    }\n\n    url := \"discord://abc123@123456789\"\n    errs := shoutrrr.Send(url, \"Hello via proxy!\")\n    if len(errs) &gt; 0 {\n        for _, err := range errs {\n            log.Println(\"Error:\", err)\n        }\n    }\n}\n</code></pre> Expected Output (Success)<pre><code>(No output on success)\n</code></pre> Expected Output (Error)<pre><code>Error: failed to send message: unexpected response status code\n</code></pre>"},{"location":"guides/proxy/#notes","title":"Notes","text":"<ul> <li>Environment Variable: <code>HTTP_PROXY</code> supports protocols like <code>http</code>, <code>https</code>, or <code>socks5</code>. It affects all HTTP-based services globally.</li> <li>Custom HTTP Client: Provides fine-grained control over proxy settings, suitable for Go applications requiring specific transport configurations.</li> <li>Service Compatibility: Ensure the proxy supports the protocol used by the service (e.g., HTTPS for Discord, SMTP).</li> <li>Timeouts: The custom client example includes a 30-second dial timeout and 10-second TLS handshake timeout, adjustable as needed.</li> </ul>"},{"location":"guides/slack/","title":"Slack Guides","text":""},{"location":"guides/slack/#overview","title":"Overview","text":"<p>Guides for setting up the Slack service, including obtaining tokens (Bot API or Webhook) and channel IDs. The Slack service supports customization options like bot name, icon, color, title, and threading.</p>"},{"location":"guides/slack/#getting_a_token","title":"Getting a Token","text":"<p>To send messages, use either a Bot API token (preferred for full features) or a Webhook token. Only Webhook tokens allow customizing the bot name or icon without the Bot API.</p>"},{"location":"guides/slack/#bot_api_preferred","title":"Bot API (Preferred)","text":"<ol> <li>Create a new App for your bot using the Basic app setup guide.</li> <li>Install the App into your workspace (Slack installation guide).</li> <li> <p>From Apps, select your new App and go to OAuth &amp; Permissions.   </p> </li> <li> <p>Copy the Bot User OAuth Token.   </p> </li> </ol> <p>Example</p> <p>Given the API token <code>xoxb-123456789012-1234567890123-4mt0t4l1YL3g1T5L4cK70k3N</code> and channel ID <code>C001CH4NN3L</code> (obtained via the guide below), the Shoutrrr URL should look like: <pre><code>slack://xoxb:123456789012-1234567890123-4mt0t4l1YL3g1T5L4cK70k3N@C001CH4NN3L\n</code></pre></p>"},{"location":"guides/slack/#webhook_tokens","title":"Webhook Tokens","text":"<p>Get a Webhook URL using the legacy WebHooks Integration or the Getting started with Incoming Webhooks guide. Replace the initial <code>https://hooks.slack.com/services/</code> part with <code>slack://hook:</code> to form the Shoutrrr URL.</p> <p>Slack Webhook URL</p> <pre><code>https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\n</code></pre> <p>Shoutrrr URL</p> <pre><code>slack://hook:T00000000-B00000000-XXXXXXXXXXXXXXXXXXXXXXXX@webhook\n</code></pre>"},{"location":"guides/slack/#getting_the_channel_id","title":"Getting the Channel ID","text":"<p>Note</p> <p>Only needed for Bot API tokens. Use <code>webhook</code> as the channel for Webhook tokens.</p> <ol> <li> <p>In the channel you wish to post to, open Channel Details by clicking on the channel title.   </p> </li> <li> <p>Copy the Channel ID from the bottom of the popup and append it to your Shoutrrr URL.   </p> </li> </ol>"},{"location":"guides/slack/#additional_configuration","title":"Additional Configuration","text":"<p>Customize notifications using query parameters in the URL:</p> Parameter Description Example Value <code>botname</code> Bot display name (overrides default). <code>ShoutrrrBot</code> <code>icon</code> Emoji (e.g., <code>:robot_face:</code>) or URL for the bot icon. <code>:robot_face:</code> <code>color</code> Message border color (e.g., <code>good</code>, <code>warning</code>, <code>danger</code>, or hex like <code>%23ff8000</code>). <code>good</code> <code>title</code> Message title (prepended above the message). <code>Alert</code> <code>thread_ts</code> Timestamp of the parent message for threading (replies). <code>1234567890.123456</code> <p>Full URL with Customizations</p> <pre><code>slack://xoxb:123456789012-1234567890123-4mt0t4l1YL3g1T5L4cK70k3N@C001CH4NN3L?botname=ShoutrrrBot&amp;color=good&amp;title=Great+News&amp;   icon=%3Arobot_face%3A&amp;thread_ts=1234567890.123456\n</code></pre> <p>Note</p> <p>For colors, escape <code>#</code> as <code>%23</code> in URLs (e.g., <code>#ff8000</code> becomes <code>%23ff8000</code>). Use <code>thread_ts</code> to reply in threads.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#overview","title":"Overview","text":"<p>Shoutrrr is available via source code, released binaries, container images, and a GitHub Action.</p>"},{"location":"installation/#build_and_install_from_source","title":"Build and Install from Source","text":"Install from Source<pre><code>go install github.com/nicholas-fedor/shoutrrr/shoutrrr@latest\n</code></pre>"},{"location":"installation/#github_release_binary_installation","title":"GitHub Release Binary Installation","text":"<p>The following scripts install the latest release binary to the user's <code>$HOME/go/bin</code> directory. Ensure this directory is in your <code>PATH</code> to enable execution without specifying the full binary path.</p> Windows (amd64)Linux (amd64)macOS (amd64) Windows (amd64) Installation<pre><code>New-Item -ItemType Directory -Path $HOME\\go\\bin -Force | Out-Null; iwr (iwr https://api.github.com/repos/nicholas-fedor/shoutrrr/releases/latest | ConvertFrom-Json).assets.where({$_.name -like \"*windows_amd64*.zip\"}).browser_download_url -OutFile shoutrrr.zip; Add-Type -AssemblyName System.IO.Compression.FileSystem; ($z=[System.IO.Compression.ZipFile]::OpenRead(\"$PWD\\shoutrrr.zip\")).Entries | ? {$_.Name -eq 'shoutrrr.exe'} | % {[System.IO.Compression.ZipFileExtensions]::ExtractToFile($_, \"$HOME\\go\\bin\\$($_.Name)\", $true)}; $z.Dispose(); rm shoutrrr.zip; if (Test-Path \"$HOME\\go\\bin\\shoutrrr.exe\") { Write-Host \"Successfully installed shoutrrr.exe to $HOME\\go\\bin\" } else { Write-Host \"Failed to install shoutrrr.exe\" }\n</code></pre> Linux (amd64) Installation<pre><code>mkdir -p $HOME/go/bin &amp;&amp; curl -L $(curl -s https://api.github.com/repos/nicholas-fedor/shoutrrr/releases/latest | grep -o 'https://[^\"]*linux_amd64[^\"]*\\.tar\\.gz') | tar -xz --strip-components=1 -C $HOME/go/bin shoutrrr\n</code></pre> macOS (amd64) Installation<pre><code>mkdir -p $HOME/go/bin &amp;&amp; curl -L $(curl -s https://api.github.com/repos/nicholas-fedor/shoutrrr/releases/latest | grep -o 'https://[^\"]*darwin_amd64[^\"]*\\.tar\\.gz') | tar -xz --strip-components=1 -C $HOME/go/bin shoutrrr\n</code></pre> <p>Note</p> <p>Review the release page for additional architectures (e.g., arm, arm64, i386, riscv64).</p>"},{"location":"installation/#container_images","title":"Container Images","text":"<p>Shoutrrr provides lightweight Docker images based on Alpine Linux, supporting multiple architectures (amd64, arm64, arm/v6, i386, riscv64). Images are available on Docker Hub and GitHub Container Registry (GHCR).</p> Docker HubGitHub Container Registry Pull from Docker Hub<pre><code>docker pull nickfedor/shoutrrr:latest\n</code></pre> <ul> <li>Repository: https://hub.docker.com/r/nickfedor/shoutrrr</li> <li>Image Reference: <code>nickfedor/shoutrrr</code></li> <li>Tags: <code>latest</code>, <code>vX.Y.Z</code> (e.g., <code>v0.8.0</code>), <code>latest-dev</code>, platform-specific (e.g., <code>amd64-latest</code>)</li> </ul> Pull from GHCR<pre><code>docker pull ghcr.io/nicholas-fedor/shoutrrr:latest\n</code></pre> <ul> <li>Repository: https://github.com/nicholas-fedor/shoutrrr/pkgs/container/shoutrrr</li> <li>Image Reference: <code>ghcr.io/nicholas-fedor/shoutrrr</code></li> <li>Tags: <code>latest</code>, <code>vX.Y.Z</code> (e.g., <code>v0.8.0</code>), <code>latest-dev</code>, platform-specific (e.g., <code>arm64v8-latest</code>)</li> </ul> <p>Note</p> <p>Use <code>latest</code> for the latest stable release, versioned tags (e.g., <code>v0.8.0</code>) for specific releases, or <code>latest-dev</code> for development snapshots. Platform-specific tags are available for targeted deployments.</p>"},{"location":"installation/#go_package","title":"Go Package","text":"<p>Add Shoutrrr to your Go project using:</p> Add Go Package<pre><code>go get github.com/nicholas-fedor/shoutrrr@latest\n</code></pre>"},{"location":"installation/#github_action","title":"GitHub Action","text":"<p>Use Shoutrrr in GitHub workflows to send notifications.</p> Example GitHub Workflow with Shoutrrr<pre><code>name: Deploy\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Some other steps needed for deploying\n        run: ...\n      - name: Shoutrrr\n        uses: nicholas-fedor/shoutrrr-action@v1\n        with:\n          url: ${{ secrets.SHOUTRRR_URL }}\n          title: Deployed ${{ github.sha }}\n          message: See changes at ${{ github.event.compare }}.\n</code></pre> <p>Note</p> <p>Pin the action to a specific SHA or version tag (e.g., <code>@v1</code>) and manage updates with Dependabot or Renovate for stability.</p>"},{"location":"services/overview/","title":"Services Overview","text":""},{"location":"services/overview/#available_services","title":"Available Services","text":"<p>Click on the service for a more thorough explanation.</p> Service URL format Bark bark://<code>devicekey</code>@<code>host</code> Discord discord://<code>token</code>@<code>id</code>[?thread_id=<code>threadid</code>] Email smtp://<code>username</code>:<code>password</code>@<code>host</code>:<code>port</code>/?fromaddress=<code>fromAddress</code>&amp;toaddresses=<code>recipient1</code>[,<code>recipient2</code>,...][&amp;additional_params] Google Chat googlechat://chat.googleapis.com/v1/spaces/FOO/messages?key=bar&amp;token=baz Gotify gotify://<code>gotify-host</code>/<code>token</code> Hangouts* hangouts://chat.googleapis.com/v1/spaces/FOO/messages?key=bar&amp;token=baz IFTTT ifttt://<code>key</code>/?events=<code>event1</code>[,<code>event2</code>,...]&amp;value1=<code>value1</code>&amp;value2=<code>value2</code>&amp;value3=<code>value3</code> Join join://shoutrrr:<code>api-key</code>@join/?devices=<code>device1</code>[,<code>device2</code>, ...][&amp;icon=<code>icon</code>][&amp;title=<code>title</code>] Lark lark://<code>host</code>/<code>token</code>?secret=<code>secret</code>&amp;title=<code>title</code>&amp;link=<code>url</code> Matrix matrix://<code>username</code>:<code>password</code>@<code>host</code>:<code>port</code>/[?rooms=<code>!roomID1</code>[,<code>roomAlias2</code>]] Mattermost mattermost://[<code>username</code>@]<code>mattermost-host</code>/<code>token</code>[/<code>channel</code>] Ntfy ntfy://<code>username</code>:<code>password</code>__@ntfy.sh/<code>topic</code>__ OpsGenie opsgenie://<code>host</code>/token?responders=<code>responder1</code>[,<code>responder2</code>] Pushbullet pushbullet://<code>api-token</code>[/<code>device</code>/#<code>channel</code>/<code>email</code>] Pushover pushover://shoutrrr:<code>apiToken</code>@<code>userKey</code>/?devices=<code>device1</code>[,<code>device2</code>, ...] Rocketchat rocketchat://[<code>username</code>@]<code>rocketchat-host</code>/<code>token</code>[/<code>channel</code>|<code>@recipient</code>] Slack slack://[<code>botname</code>@]<code>token-a</code>/<code>token-b</code>/<code>token-c</code> Teams teams://<code>group</code>@<code>tenant</code>/<code>altId</code>/<code>groupOwner</code>?host=<code>organization</code>.webhook.office.com Telegram telegram://<code>token</code>@telegram?chats=<code>@channel-1</code>[,<code>chat-id-1</code>,...] Zulip Chat zulip://<code>bot-mail</code>:<code>bot-key</code>@<code>zulip-domain</code>/?stream=<code>name-or-id</code>&amp;topic=<code>name</code> * Deprecated"},{"location":"services/overview/#specialized_services","title":"Specialized Services","text":"Service Description Logger Writes a notification to a configured Go <code>log.Logger</code> Generic Webhook Sends notifications directly to a webhook"},{"location":"services/bark/","title":"Bark","text":"<p>Upstream docs: https://github.com/Finb/Bark</p>"},{"location":"services/bark/#url_format","title":"URL Format","text":""},{"location":"services/bark/#url_fields","title":"URL Fields","text":"<ul> <li>DeviceKey - The key for each device (Required)   URL part: <code>bark://:devicekey@host/path/</code> </li> <li>Host - Server hostname and port (Required)   URL part: <code>bark://:devicekey@host/path/</code> </li> <li>Path - Server path   Default: <code>/</code>   URL part: <code>bark://:devicekey@host/path/</code> </li> </ul>"},{"location":"services/bark/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Badge - The number displayed next to App icon   Default: <code>0</code> </p> </li> <li> <p>Category - Reserved field, no use yet   Default: empty </p> </li> <li> <p>Copy - The value to be copied   Default: empty </p> </li> <li> <p>Group - The group of the notification   Default: empty </p> </li> <li> <p>Icon - An url to the icon, available only on iOS 15 or later   Default: empty </p> </li> <li> <p>Scheme - Server protocol, http or https   Default: <code>https</code> </p> </li> <li> <p>Sound - Value from https://github.com/Finb/Bark/tree/master/Sounds   Default: empty </p> </li> <li> <p>Title - Notification title, optionally set by the sender   Default: empty </p> </li> <li> <p>URL - Url that will jump when click notification   Default: empty </p> </li> </ul>"},{"location":"services/bark/config/","title":"Config","text":""},{"location":"services/bark/config/#url_fields","title":"URL Fields","text":"<ul> <li>DeviceKey - The key for each device (Required)   URL part: <code>bark://:devicekey@host/path/</code> </li> <li>Host - Server hostname and port (Required)   URL part: <code>bark://:devicekey@host/path/</code> </li> <li>Path - Server path   Default: <code>/</code>   URL part: <code>bark://:devicekey@host/path/</code> </li> </ul>"},{"location":"services/bark/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Badge - The number displayed next to App icon   Default: <code>0</code> </p> </li> <li> <p>Category - Reserved field, no use yet   Default: empty </p> </li> <li> <p>Copy - The value to be copied   Default: empty </p> </li> <li> <p>Group - The group of the notification   Default: empty </p> </li> <li> <p>Icon - An url to the icon, available only on iOS 15 or later   Default: empty </p> </li> <li> <p>Scheme - Server protocol, http or https   Default: <code>https</code> </p> </li> <li> <p>Sound - Value from https://github.com/Finb/Bark/tree/master/Sounds   Default: empty </p> </li> <li> <p>Title - Notification title, optionally set by the sender   Default: empty </p> </li> <li> <p>URL - Url that will jump when click notification   Default: empty </p> </li> </ul>"},{"location":"services/discord/","title":"Discord","text":""},{"location":"services/discord/#url_format","title":"URL Format","text":"<p>Your Discord Webhook-URL will look like this:</p> <p>https://discord.com/api/webhooks/__<code>webhookid</code>/<code>token</code>__</p> <p>The shoutrrr service URL should look like this:</p> <p>discord://<code>token</code>@<code>webhookid</code>[?thread_id=<code>threadid</code>]</p>"},{"location":"services/discord/#thread_support","title":"Thread Support","text":"<p>To send messages to a specific thread in a Discord channel, include the <code>thread_id</code> query parameter in the service URL with the ID of the target thread. For example:</p> <p>discord://<code>token</code>@<code>webhookid</code>?thread_id=123456789</p> <p>You can obtain the <code>thread_id</code> by right-clicking a thread in Discord and selecting \"Copy ID\" (requires Developer Mode to be enabled in Discord settings).</p>"},{"location":"services/discord/#url_fields","title":"URL Fields","text":"<ul> <li>Token (Required)   URL part: <code>discord://token@webhookid/</code> </li> <li>WebhookID (Required)   URL part: <code>discord://token@webhookid/</code> </li> </ul>"},{"location":"services/discord/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Avatar - Override the webhook default avatar with specified URL   Default: empty   Aliases: <code>avatarurl</code> </p> </li> <li> <p>Color - The color of the left border for plain messages   Default: <code>0x50D9ff</code> </p> </li> <li> <p>ColorDebug - The color of the left border for debug messages   Default: <code>0x7b00ab</code> </p> </li> <li> <p>ColorError - The color of the left border for error messages   Default: <code>0xd60510</code> </p> </li> <li> <p>ColorInfo - The color of the left border for info messages   Default: <code>0x2488ff</code> </p> </li> <li> <p>ColorWarn - The color of the left border for warning messages   Default: <code>0xffc441</code> </p> </li> <li> <p>JSON - Whether to send the whole message as the JSON payload instead of using it as the 'content' field   Default: \u274c <code>No</code> </p> </li> <li> <p>SplitLines - Whether to send each line as a separate embedded item   Default: \u2714 <code>Yes</code> </p> </li> <li> <p>ThreadID - The thread ID to send the message to   Default: empty </p> </li> <li> <p>Title   Default: empty </p> </li> <li> <p>Username - Override the webhook default username   Default: empty </p> </li> </ul>"},{"location":"services/discord/#creating_a_webhook_in_discord","title":"Creating a webhook in Discord","text":"<ol> <li> <p>Open your channel settings by first clicking on the gear icon next to the name of the channel. </p> </li> <li> <p>In the menu on the left, click on Integrations. </p> </li> <li> <p>In the menu on the right, click on Create Webhook. </p> </li> <li> <p>Set the name, channel, and icon to your liking and click the Copy Webhook URL button. </p> </li> <li> <p>Press the Save Changes button. </p> </li> <li> <p>Format the service URL:</p> </li> </ol> <pre><code>https://discord.com/api/webhooks/693853386302554172/W3dE2OZz4C13_4z_uHfDOoC7BqTW288s-z1ykqI0iJnY_HjRqMGO8Sc7YDqvf_KVKjhJ\n                                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                     webhook id                                    token\n\ndiscord://W3dE2OZz4C13_4z_uHfDOoC7BqTW288s-z1ykqI0iJnY_HjRqMGO8Sc7YDqvf_KVKjhJ@693853386302554172?thread_id=123456789\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                          token                                    webhook id           thread id\n</code></pre>"},{"location":"services/discord/config/","title":"Config","text":""},{"location":"services/discord/config/#url_fields","title":"URL Fields","text":"<ul> <li>Token (Required)   URL part: <code>discord://token@webhookid/</code> </li> <li>WebhookID (Required)   URL part: <code>discord://token@webhookid/</code> </li> </ul>"},{"location":"services/discord/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Avatar - Override the webhook default avatar with specified URL   Default: empty   Aliases: <code>avatarurl</code> </p> </li> <li> <p>Color - The color of the left border for plain messages   Default: <code>0x50D9ff</code> </p> </li> <li> <p>ColorDebug - The color of the left border for debug messages   Default: <code>0x7b00ab</code> </p> </li> <li> <p>ColorError - The color of the left border for error messages   Default: <code>0xd60510</code> </p> </li> <li> <p>ColorInfo - The color of the left border for info messages   Default: <code>0x2488ff</code> </p> </li> <li> <p>ColorWarn - The color of the left border for warning messages   Default: <code>0xffc441</code> </p> </li> <li> <p>JSON - Whether to send the whole message as the JSON payload instead of using it as the 'content' field   Default: \u274c <code>No</code> </p> </li> <li> <p>SplitLines - Whether to send each line as a separate embedded item   Default: \u2714 <code>Yes</code> </p> </li> <li> <p>ThreadID - The thread ID to send the message to   Default: empty </p> </li> <li> <p>Title   Default: empty </p> </li> <li> <p>Username - Override the webhook default username   Default: empty </p> </li> </ul>"},{"location":"services/email/","title":"Email","text":""},{"location":"services/email/#url_format","title":"URL Format","text":"<p>smtp://<code>username</code>:<code>password</code>@<code>host</code>:<code>port</code>/?fromaddress=<code>fromAddress</code>&amp;toaddresses=<code>recipient1</code>[,<code>recipient2</code>,...]&amp;subject=<code>subject</code>&amp;auth=<code>auth</code>&amp;encryption=<code>encryption</code>&amp;useStartTLS=<code>yes/no</code>&amp;useHTML=<code>yes/no</code>&amp;clientHost=<code>hostname</code>&amp;requirestarttls=<code>yes/no</code>&amp;timeout=<code>duration</code></p>"},{"location":"services/email/#url_fields","title":"URL Fields","text":"<ul> <li>Username - SMTP server username   Default: empty   URL part: <code>smtp://username:password@host:port/</code> </li> <li>Password - SMTP server password or hash (for OAuth2)   Default: empty   URL part: <code>smtp://username:password@host:port/</code> </li> <li>Host - SMTP server hostname or IP address (Required)   URL part: <code>smtp://username:password@host:port/</code> </li> <li>Port - SMTP server port, common ones are 25, 465, 587 or 2525   Default: <code>25</code>   URL part: <code>smtp://username:password@host:port/</code> </li> </ul>"},{"location":"services/email/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>FromAddress - E-mail address that the mail are sent from (Required)   Aliases: <code>from</code> </p> </li> <li> <p>ToAddresses - List of recipient e-mails (Required)   Aliases: <code>to</code> </p> </li> <li> <p>Auth - SMTP authentication method   Default: <code>Unknown</code>   Possible values: <code>None</code>, <code>Plain</code>, <code>CRAMMD5</code>, <code>Unknown</code>, <code>OAuth2</code> </p> </li> <li> <p>ClientHost - SMTP client hostname   Default: <code>localhost</code> </p> </li> <li> <p>Encryption - Encryption method   Default: <code>Auto</code>   Possible values: <code>None</code>, <code>ExplicitTLS</code>, <code>ImplicitTLS</code>, <code>Auto</code> </p> </li> <li> <p>FromName - Name of the sender   Default: empty </p> </li> <li> <p>RequireStartTLS - Fail if StartTLS is enabled but unsupported   Default: \u274c <code>No</code> </p> </li> <li> <p>Subject - The subject of the sent mail   Default: <code>Shoutrrr Notification</code>   Aliases: <code>title</code> </p> </li> <li> <p>Timeout - Timeout for SMTP operations   Default: <code>10s</code> </p> </li> <li> <p>UseHTML - Whether the message being sent is in HTML   Default: \u274c <code>No</code> </p> </li> <li> <p>UseStartTLS - Whether to use StartTLS encryption   Default: \u2714 <code>Yes</code>   Aliases: <code>starttls</code> </p> </li> </ul>"},{"location":"services/generic/","title":"Generic","text":"<p>The Generic service can be used for any target that is not explicitly supported by Shoutrrr, as long as it supports receiving the message via a POST request. Usually, this requires customization on the receiving end to interpret the payload that it receives, and might not be a viable approach.</p> <p>Common examples for use with service providers can be found under examples.</p>"},{"location":"services/generic/#custom_headers","title":"Custom headers","text":"<p>You can add additional HTTP headers to your request by adding query variables prefixed with <code>@</code> (<code>@key=value</code>).</p> <p>Using</p> <pre><code>generic://example.com?@acceptLanguage=tlh-Piqd\n</code></pre> <p>would result in the additional header being added:</p> <pre><code>Accept-Language: tlh-Piqd\n</code></pre>"},{"location":"services/generic/#json_template","title":"JSON template","text":"<p>By using the built in <code>JSON</code> template (<code>template=json</code>) you can create a generic JSON payload. The keys used for <code>title</code> and <code>message</code> can be overriden by supplying the params/query values <code>titleKey</code> and <code>messageKey</code>.</p> <p>Example</p> <pre><code>{\n    \"title\": \"Oh no!\",\n    \"message\": \"The thing happened and now there is stuff all over the area!\"\n}\n</code></pre>"},{"location":"services/generic/#custom_data_fields","title":"Custom data fields","text":"<p>When using the JSON template, you can add additional key/value pairs to the JSON object by adding query variables prefixed with <code>$</code> (<code>$key=value</code>).</p> <p>Example</p> <p>Using <code>generic://example.com?$projection=retroazimuthal</code> would yield: <pre><code>{\n    \"title\": \"Amazing opportunities!\",\n    \"message\": \"New map book available for purchase.\",\n    \"projection\": \"retroazimuthal\"\n}\n</code></pre></p>"},{"location":"services/generic/#shortcut_url","title":"Shortcut URL","text":"<p>You can just add <code>generic+</code> as a prefix to your target URL to use it with the generic service, so</p> <pre><code>https://example.com/api/v1/postStuff\n</code></pre> <p>would become</p> <pre><code>generic+https://example.com/api/v1/postStuff\n</code></pre> <p>Note</p> <p>Any query variables added to the URL will be escaped so that they can be forwarded to the remote server. That means that you cannot use <code>?template=json</code> with the  <code>generic+https://</code>, just use <code>generic://</code> instead!</p>"},{"location":"services/generic/#forwarded_query_variables","title":"Forwarded query variables","text":"<p>All query variables that are not listed in the Query/Param Props section will be forwarded to the target endpoint. If you need to pass a query variable that is reserved, you can prefix it with an underscore (<code>_</code>).</p> <p>Example</p> <p>The URL <code>generic+https://example.com/api/v1/postStuff?contenttype=text/plain</code> would send a POST message to <code>https://example.com/api/v1/postStuff</code> using the <code>Content-Type: text/plain</code> header. If instead escaped, <code>generic+https://example.com/api/v1/postStuff?_contenttype=text/plain</code> would send a POST message to <code>https://example.com/api/v1/postStuff?contenttype=text/plain</code> using the <code>Content-Type: application/json</code> header (as it's the default).</p>"},{"location":"services/generic/#url_format","title":"URL Format","text":""},{"location":"services/generic/#url_fields","title":"URL Fields","text":""},{"location":"services/generic/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>ContentType - The value of the Content-Type header   Default: <code>application/json</code> </p> </li> <li> <p>DisableTLS   Default: \u274c <code>No</code> </p> </li> <li> <p>MessageKey - The key that will be used for the message value   Default: <code>message</code> </p> </li> <li> <p>RequestMethod   Default: <code>POST</code> </p> </li> <li> <p>Template - The template used for creating the request payload   Default: empty </p> </li> <li> <p>Title   Default: empty </p> </li> <li> <p>TitleKey - The key that will be used for the title value   Default: <code>title</code> </p> </li> </ul>"},{"location":"services/generic/config/","title":"Config","text":""},{"location":"services/generic/config/#url_fields","title":"URL Fields","text":""},{"location":"services/generic/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>ContentType - The value of the Content-Type header   Default: <code>application/json</code> </p> </li> <li> <p>DisableTLS   Default: \u274c <code>No</code> </p> </li> <li> <p>MessageKey - The key that will be used for the message value   Default: <code>message</code> </p> </li> <li> <p>RequestMethod   Default: <code>POST</code> </p> </li> <li> <p>Template - The template used for creating the request payload   Default: empty </p> </li> <li> <p>Title   Default: empty </p> </li> <li> <p>TitleKey - The key that will be used for the title value   Default: <code>title</code> </p> </li> </ul>"},{"location":"services/googlechat/","title":"Google Chat","text":""},{"location":"services/googlechat/#url_format","title":"URL Format","text":"<p>Your Google Chat Incoming Webhook URL will look like this:</p> <p>https://chat.googleapis.com/v1/spaces/__<code>FOO</code>/messages?key=<code>bar</code>&amp;token=<code>baz</code>__</p> <p>The shoutrrr service URL should look like this:</p> <p>googlechat://chat.googleapis.com/v1/spaces/<code>FOO</code>/messages?key=<code>bar</code>&amp;token=<code>baz</code></p> <p>In other words the incoming webhook URL with <code>https</code> replaced by <code>googlechat</code>.</p> <p>Google Chat was previously known as Hangouts Chat. Using <code>hangouts</code> in the service URL instead <code>googlechat</code> is still supported, although deprecated.</p>"},{"location":"services/googlechat/#creating_an_incoming_webhook_in_google_chat","title":"Creating an incoming webhook in Google Chat","text":"<ol> <li> <p>Open the room you would like to add Shoutrrr to and open the chat room menu. </p> </li> <li> <p>Then click on Configure webhooks. </p> </li> <li> <p>Name the webhook and save. </p> </li> <li> <p>Copy the URL. </p> </li> <li> <p>Format the service URL by replacing <code>https</code> with <code>googlechat</code>.</p> </li> </ol>"},{"location":"services/googlechat/config/","title":"Config","text":""},{"location":"services/googlechat/config/#url_fields","title":"URL Fields","text":""},{"location":"services/googlechat/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Key (Required)  </p> </li> <li> <p>Path (Required)  </p> </li> <li> <p>Token (Required)  </p> </li> <li> <p>Host   Default: <code>chat.googleapis.com</code> </p> </li> </ul>"},{"location":"services/gotify/","title":"Gotify","text":""},{"location":"services/gotify/#url_format","title":"URL Format","text":""},{"location":"services/gotify/#url_fields","title":"URL Fields","text":"<ul> <li>Host - Server hostname (and optionally port) (Required)   URL part: <code>gotify://host:port/path/token</code> </li> <li>Path - Server subpath   Default: empty   URL part: <code>gotify://host:port/path/token</code> </li> <li>Token - Application token (Required)   URL part: <code>gotify://host:port/path/token</code> </li> </ul>"},{"location":"services/gotify/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>DisableTLS   Default: \u274c <code>No</code> </p> </li> <li> <p>Priority   Default: <code>0</code> </p> </li> <li> <p>Title   Default: <code>Shoutrrr notification</code> </p> </li> </ul>"},{"location":"services/gotify/#examples","title":"Examples","text":"<p>Common usage</p> <pre><code>gotify://gotify.example.com:443/AzyoeNS.D4iJLVa/?title=Great+News&amp;priority=1\n</code></pre> <p>With subpath</p> <pre><code>gotify://example.com:443/path/to/gotify/AzyoeNS.D4iJLVa/?title=Great+News&amp;priority=1\n</code></pre>"},{"location":"services/gotify/config/","title":"Config","text":""},{"location":"services/gotify/config/#url_fields","title":"URL Fields","text":"<ul> <li>Host - Server hostname (and optionally port) (Required)   URL part: <code>gotify://host:port/path/token</code> </li> <li>Path - Server subpath   Default: empty   URL part: <code>gotify://host:port/path/token</code> </li> <li>Token - Application token (Required)   URL part: <code>gotify://host:port/path/token</code> </li> </ul>"},{"location":"services/gotify/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>DisableTLS   Default: \u274c <code>No</code> </p> </li> <li> <p>Priority   Default: <code>0</code> </p> </li> <li> <p>Title   Default: <code>Shoutrrr notification</code> </p> </li> </ul>"},{"location":"services/hangouts/","title":"Hangouts Chat","text":"<p>Google Chat was previously known as Hangouts Chat. See Google Chat.</p> <p>Using <code>hangouts</code> in the service URL instead <code>googlechat</code> is still supported, although deprecated.</p>"},{"location":"services/ifttt/","title":"IFTTT","text":""},{"location":"services/ifttt/#url_format","title":"URL Format","text":"<p>ifttt://<code>key</code>/?events=<code>event1</code>[,<code>event2</code>,...]&amp;value1=<code>value1</code>&amp;value2=<code>value2</code>&amp;value3=<code>value3</code></p>"},{"location":"services/ifttt/#url_fields","title":"URL Fields","text":"<ul> <li>WebHookID (Required)   URL part: <code>ifttt://webhookid/</code> </li> </ul>"},{"location":"services/ifttt/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Events (Required)  </p> </li> <li> <p>Title - Notification title, optionally set by the sender   Default: empty </p> </li> <li> <p>UseMessageAsValue - Sets the corresponding value field to the notification message   Default: <code>2</code> </p> </li> <li> <p>UseTitleAsValue - Sets the corresponding value field to the notification title   Default: <code>0</code> </p> </li> <li> <p>Value1   Default: empty </p> </li> <li> <p>Value2   Default: empty </p> </li> <li> <p>Value3   Default: empty </p> </li> </ul>"},{"location":"services/ifttt/config/","title":"Config","text":""},{"location":"services/ifttt/config/#url_fields","title":"URL Fields","text":"<ul> <li>WebHookID (Required)   URL part: <code>ifttt://webhookid/</code> </li> </ul>"},{"location":"services/ifttt/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Events (Required)  </p> </li> <li> <p>Title - Notification title, optionally set by the sender   Default: empty </p> </li> <li> <p>UseMessageAsValue - Sets the corresponding value field to the notification message   Default: <code>2</code> </p> </li> <li> <p>UseTitleAsValue - Sets the corresponding value field to the notification title   Default: <code>0</code> </p> </li> <li> <p>Value1   Default: empty </p> </li> <li> <p>Value2   Default: empty </p> </li> <li> <p>Value3   Default: empty </p> </li> </ul>"},{"location":"services/join/","title":"Join","text":""},{"location":"services/join/#url_format","title":"URL Format","text":"<p>join://shoutrrr:<code>api-key</code>@join/?devices=<code>device1</code>[,<code>device2</code>, ...][&amp;icon=<code>icon</code>][&amp;title=<code>title</code>]</p>"},{"location":"services/join/#url_fields","title":"URL Fields","text":"<ul> <li>APIKey (Required)   URL part: <code>join://:apikey/</code> </li> </ul>"},{"location":"services/join/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Devices - Comma separated list of device IDs (Required)  </p> </li> <li> <p>Icon - Icon URL   Default: empty </p> </li> <li> <p>Title - If set creates a notification   Default: empty </p> </li> </ul>"},{"location":"services/join/#guide","title":"Guide","text":"<ol> <li>Go to the Join Webapp </li> <li>Select your device</li> <li>Click Join API </li> <li>Your <code>deviceId</code> is shown in the top</li> <li>Click Show next to <code>API Key</code> to see your key </li> <li>Your Shoutrrr URL will then be:     <code>join://shoutrrr:</code><code>api-key</code><code>@join/?devices=</code><code>deviceId</code></li> </ol> <p>Multiple <code>deviceId</code>s can be combined with a <code>,</code> (repeat steps 2-4).</p>"},{"location":"services/join/config/","title":"Config","text":""},{"location":"services/join/config/#url_fields","title":"URL Fields","text":"<ul> <li>APIKey (Required)   URL part: <code>join://:apikey/</code> </li> </ul>"},{"location":"services/join/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Devices - Comma separated list of device IDs (Required)  </p> </li> <li> <p>Icon - Icon URL   Default: empty </p> </li> <li> <p>Title - If set creates a notification   Default: empty </p> </li> </ul>"},{"location":"services/lark/","title":"Lark","text":"<p>Send notifications to Lark using a custom bot webhook.</p>"},{"location":"services/lark/#url_format","title":"URL Format","text":"<p>lark://<code>host</code>/<code>token</code>?secret=<code>secret</code>&amp;title=<code>title</code>&amp;link=<code>url</code></p>"},{"location":"services/lark/#url_fields","title":"URL Fields","text":"<ul> <li>Host - Custom bot URL Host   Default: <code>open.larksuite.com</code>   URL part: <code>lark://host/path/</code> </li> <li>Path - Custom bot token (Required)   URL part: <code>lark://host/path/</code> </li> </ul>"},{"location":"services/lark/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Link - Optional link URL   Default: empty </p> </li> <li> <p>Secret - Custom bot secret   Default: empty </p> </li> <li> <p>Title - Message Title   Default: empty </p> </li> <li> <p><code>host</code>: The bot API host (<code>open.larksuite.com</code> for Lark, <code>open.feishu.cn</code> for Feishu).</p> </li> <li><code>token</code>: The bot webhook token (required).</li> <li><code>secret</code>: Optional bot secret for signed requests.</li> <li><code>title</code>: Optional message title (switches to post format if set).</li> <li><code>link</code>: Optional URL to include as a clickable link in the message.</li> </ul>"},{"location":"services/lark/#example_url","title":"Example URL","text":"<pre><code>lark://open.larksuite.com/abc123?secret=xyz789&amp;title=Alert&amp;link=https://example.com\n</code></pre>"},{"location":"services/lark/#create_a_custom_bot_in_lark","title":"Create a Custom Bot in Lark","text":"<p>Official Documentation: Custom Bot Guide</p> <ol> <li> <p>Invite the Custom Bot to a Group:    a. Open the target group, click <code>More</code> in the upper-right corner, and then select <code>Settings</code>.    b. In the <code>Settings</code> panel, click <code>Group Bot</code>.    c. Click <code>Add a Bot</code> under <code>Group Bot</code>.    d. In the <code>Add Bot</code> dialog, locate <code>Custom Bot</code> and select it.    e. Set the bot\u2019s name and description, then click <code>Add</code>.    f. Copy the webhook address and click <code>Finish</code>.  </p> </li> <li> <p>Get Host and Token:</p> </li> <li>For Lark: Use <code>host = open.larksuite.com</code>.  </li> <li>For Feishu: Use <code>host = open.feishu.cn</code>.  </li> <li> <p>The <code>token</code> is the last segment of the webhook URL.     For example, in <code>https://open.larksuite.com/open-apis/bot/v2/hook/xxxxxxxxxxxxxxxxx</code>, the token is <code>xxxxxxxxxxxxxxxxx</code>.</p> </li> <li> <p>Get Secret (Optional):    a. In group settings, open the bot list, find your custom bot, and select it to access its configuration.    b. Under <code>Security Settings</code>, enable <code>Signature Verification</code>.    c. Click <code>Copy</code> to save the secret.    d. Click <code>Save</code> to apply the changes.</p> </li> </ol>"},{"location":"services/lark/config/","title":"Config","text":""},{"location":"services/lark/config/#url_fields","title":"URL Fields","text":"<ul> <li>Host - Custom bot URL Host   Default: <code>open.larksuite.com</code>   URL part: <code>lark://host/path/</code> </li> <li>Path - Custom bot token (Required)   URL part: <code>lark://host/path/</code> </li> </ul>"},{"location":"services/lark/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Link - Optional link URL   Default: empty </p> </li> <li> <p>Secret - Custom bot secret   Default: empty </p> </li> <li> <p>Title - Message Title   Default: empty </p> </li> </ul>"},{"location":"services/logger/","title":"Logger","text":"<p>No configuration options are available for this service.</p> <p>It simply emits notifications to the Shoutrrr log which is configured by the consumer.</p>"},{"location":"services/logger/config/","title":"Config","text":""},{"location":"services/logger/config/#url_fields","title":"URL Fields","text":""},{"location":"services/logger/config/#queryparam_props","title":"Query/Param Props","text":"<p>The services does not support any query/param props</p>"},{"location":"services/matrix/","title":"Matrix","text":"<p>!!! note Usage of the <code>title</code> parameter     Do note that Matrix will discard any information put in the <code>title</code> parameter as the service has no analogue to a     a title. Instead, use a custom message format to supply your wanted title as part of the message.</p>"},{"location":"services/matrix/#url_format","title":"URL Format","text":"<p>matrix://<code>user</code>:<code>password</code>@<code>host</code>:<code>port</code>/[?rooms=<code>!roomID1</code>[,<code>roomAlias2</code>]][&amp;disableTLS=yes]</p>"},{"location":"services/matrix/#url_fields","title":"URL Fields","text":"<ul> <li>User - Username or empty when using access token   Default: empty   URL part: <code>matrix://user:password@host/</code> </li> <li>Password - Password or access token (Required)   URL part: <code>matrix://user:password@host/</code> </li> <li>Host (Required)   URL part: <code>matrix://user:password@host/</code> </li> </ul>"},{"location":"services/matrix/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>DisableTLS   Default: \u274c <code>No</code> </p> </li> <li> <p>Rooms - Room aliases, or with ! prefix, room IDs   Default: empty   Aliases: <code>room</code> </p> </li> <li> <p>Title   Default: empty </p> </li> </ul>"},{"location":"services/matrix/#authentication","title":"Authentication","text":"<p>If no <code>user</code> is specified, the <code>password</code> is treated as the authentication token. This means that no matter what login flow your server uses, if you can manually retrieve a token, then Shoutrrr can use it.</p>"},{"location":"services/matrix/#password_login_flow","title":"Password Login Flow","text":"<p>If a <code>user</code> and <code>password</code> is supplied, the <code>m.login.password</code> login flow is attempted if the server supports it.</p>"},{"location":"services/matrix/#rooms","title":"Rooms","text":"<p>If <code>rooms</code> are not specified, the service will send the message to all the rooms that the user has currently joined.</p> <p>Otherwise, the service will only send the message to the specified rooms. If the user is not in any of those rooms, but have been invited to it, it will automatically accept that invite.</p> <p>Note: The service will not join any rooms unless they are explicitly specified in <code>rooms</code>. If you need the user to join those rooms, you can send a notification with <code>rooms</code> explicitly set once.</p>"},{"location":"services/matrix/#room_lookup","title":"Room Lookup","text":"<p>Rooms specified in <code>rooms</code> will be treated as room IDs if the start with a <code>!</code> and used directly to identify rooms. If they have no such prefix (or use a correctly escaped <code>#</code>) they will instead be treated as aliases, and a directory lookup will be used to resolve their corresponding IDs.</p> <p>Note: Don't use unescaped <code>#</code> for the channel aliases as that will be treated as the <code>fragment</code> part of the URL. Either omit them or URL encode them, I.E. <code>rooms=%23alias:server</code> or <code>rooms=alias:server</code></p>"},{"location":"services/matrix/#tls","title":"TLS","text":"<p>If you do not have TLS enabled on the server you can disable it by providing <code>disableTLS=yes</code>. This will effectively use <code>http</code> intead of <code>https</code> for the API calls.</p>"},{"location":"services/matrix/config/","title":"Config","text":""},{"location":"services/matrix/config/#url_fields","title":"URL Fields","text":"<ul> <li>User - Username or empty when using access token   Default: empty   URL part: <code>matrix://user:password@host/</code> </li> <li>Password - Password or access token (Required)   URL part: <code>matrix://user:password@host/</code> </li> <li>Host (Required)   URL part: <code>matrix://user:password@host/</code> </li> </ul>"},{"location":"services/matrix/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>DisableTLS   Default: \u274c <code>No</code> </p> </li> <li> <p>Rooms - Room aliases, or with ! prefix, room IDs   Default: empty   Aliases: <code>room</code> </p> </li> <li> <p>Title   Default: empty </p> </li> </ul>"},{"location":"services/mattermost/","title":"MatterMost","text":""},{"location":"services/mattermost/#url_format","title":"URL Format","text":"<p>mattermost://[<code>username</code>@]<code>mattermost-host</code>/<code>token</code>[/<code>channel</code>][?icon=<code>smiley</code>&amp;disabletls=<code>yes</code>]</p>"},{"location":"services/mattermost/#url_fields","title":"URL Fields","text":"<ul> <li>UserName - Override webhook user   Default: empty   URL part: <code>mattermost://username@host:port/token/channel</code> </li> <li>Host - Mattermost server host (Required)   URL part: <code>mattermost://username@host:port/token/channel</code> </li> <li>Token - Webhook token (Required)   URL part: <code>mattermost://username@host:port/token/channel</code> </li> <li>Channel - Override webhook channel   Default: empty   URL part: <code>mattermost://username@host:port/token/channel</code> </li> </ul>"},{"location":"services/mattermost/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>DisableTLS   Default: \u274c <code>No</code> </p> </li> <li> <p>Icon - Use emoji or URL as icon (based on presence of http(s):// prefix)   Default: empty   Aliases: <code>icon_emoji</code>, <code>icon_url</code> </p> </li> <li> <p>Title - Notification title, optionally set by the sender (not used)   Default: empty </p> </li> </ul>"},{"location":"services/mattermost/#creating_a_webhook_in_mattermost","title":"Creating a Webhook in MatterMost","text":"<ol> <li> <p>Open up the Integrations page by clicking on Integrations within the menu </p> </li> <li> <p>Click Incoming Webhooks </p> </li> <li> <p>Click Add Incoming Webhook </p> </li> <li> <p>Fill in the information for the webhook and click Save </p> </li> <li> <p>If you did everything correctly, MatterMost will give you the URL to your newly created webhook </p> </li> <li> <p>Format the service URL</p> </li> </ol> <pre><code>https://your-domain.com/hooks/bywsw8zt5jgpte3nm65qjiru6h\n                              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        token\nmattermost://your-domain.com/bywsw8zt5jgpte3nm65qjiru6h\n                             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                       token\n</code></pre>"},{"location":"services/mattermost/#additional_url_configuration","title":"Additional URL configuration","text":"<p>Mattermost provides functionality to post as another user or to another channel, compared to the webhook configuration.  To do this, you can add a user and/or channel to the service URL.</p> <pre><code>mattermost://shoutrrrUser@your-domain.com/bywsw8zt5jgpte3nm65qjiru6h/shoutrrrChannel\n             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                 user                               token                channel\n</code></pre>"},{"location":"services/mattermost/#passing_parameters_via_code","title":"Passing parameters via code","text":"<p>If you want to, you also have the possibility to pass parameters to the <code>send</code> function.  The following example contains all parameters that are currently supported.</p> <pre><code>params := (*types.Params)(\n &amp;map[string]string{\n  \"username\": \"overwriteUserName\",\n  \"channel\": \"overwriteChannel\",\n        \"icon\": \"overwriteIcon\",\n },\n)\n\nservice.Send(\"this is a message\", params)\n</code></pre> <p>This will overwrite any options, that you passed via URL.</p>"},{"location":"services/mattermost/config/","title":"Config","text":""},{"location":"services/mattermost/config/#url_fields","title":"URL Fields","text":"<ul> <li>UserName - Override webhook user   Default: empty   URL part: <code>mattermost://username@host:port/token/channel</code> </li> <li>Host - Mattermost server host (Required)   URL part: <code>mattermost://username@host:port/token/channel</code> </li> <li>Token - Webhook token (Required)   URL part: <code>mattermost://username@host:port/token/channel</code> </li> <li>Channel - Override webhook channel   Default: empty   URL part: <code>mattermost://username@host:port/token/channel</code> </li> </ul>"},{"location":"services/mattermost/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>DisableTLS   Default: \u274c <code>No</code> </p> </li> <li> <p>Icon - Use emoji or URL as icon (based on presence of http(s):// prefix)   Default: empty   Aliases: <code>icon_emoji</code>, <code>icon_url</code> </p> </li> <li> <p>Title - Notification title, optionally set by the sender (not used)   Default: empty </p> </li> </ul>"},{"location":"services/ntfy/","title":"Ntfy","text":"<p>Upstream docs: https://docs.ntfy.sh/publish/</p>"},{"location":"services/ntfy/#url_format","title":"URL Format","text":""},{"location":"services/ntfy/#url_fields","title":"URL Fields","text":"<ul> <li>Username - Auth username   Default: empty   URL part: <code>ntfy://username:password@host/topic/</code> </li> <li>Password - Auth password   Default: empty   URL part: <code>ntfy://username:password@host/topic/</code> </li> <li>Host - Server hostname and port   Default: <code>ntfy.sh</code>   URL part: <code>ntfy://username:password@host/topic/</code> </li> <li>Topic - Target topic name (Required)   URL part: <code>ntfy://username:password@host/topic/</code> </li> </ul>"},{"location":"services/ntfy/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Actions - Custom user action buttons for notifications, see https://docs.ntfy.sh/publish/#action-buttons   Default: empty </p> </li> <li> <p>Attach - URL of an attachment, see attach via URL   Default: empty </p> </li> <li> <p>Cache - Cache messages   Default: \u2714 <code>yes</code> </p> </li> <li> <p>Click - Website opened when notification is clicked   Default: empty </p> </li> <li> <p>Delay - Timestamp or duration for delayed delivery, see https://docs.ntfy.sh/publish/#scheduled-delivery   Default: empty   Aliases: <code>at</code>, <code>in</code> </p> </li> <li> <p>Email - E-mail address for e-mail notifications   Default: empty </p> </li> <li> <p>Filename - File name of the attachment   Default: empty </p> </li> <li> <p>Firebase - Send to firebase   Default: \u2714 <code>yes</code> </p> </li> <li> <p>Icon - URL to use as notification icon   Default: empty </p> </li> <li> <p>Priority - Message priority with 1=min, 3=default and 5=max   Default: <code>default</code>   Possible values: <code>Min</code>, <code>Low</code>, <code>Default</code>, <code>High</code>, <code>Max</code> </p> </li> <li> <p>Scheme - Server protocol, http or https   Default: <code>https</code> </p> </li> <li> <p>Tags - List of tags that may or not map to emojis   Default: empty </p> </li> <li> <p>Title - Message title   Default: empty </p> </li> </ul>"},{"location":"services/ntfy/config/","title":"Config","text":""},{"location":"services/ntfy/config/#url_fields","title":"URL Fields","text":"<ul> <li>Username - Auth username   Default: empty   URL part: <code>ntfy://username:password@host/topic/</code> </li> <li>Password - Auth password   Default: empty   URL part: <code>ntfy://username:password@host/topic/</code> </li> <li>Host - Server hostname and port   Default: <code>ntfy.sh</code>   URL part: <code>ntfy://username:password@host/topic/</code> </li> <li>Topic - Target topic name (Required)   URL part: <code>ntfy://username:password@host/topic/</code> </li> </ul>"},{"location":"services/ntfy/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Actions - Custom user action buttons for notifications, see https://docs.ntfy.sh/publish/#action-buttons   Default: empty </p> </li> <li> <p>Attach - URL of an attachment, see attach via URL   Default: empty </p> </li> <li> <p>Cache - Cache messages   Default: \u2714 <code>yes</code> </p> </li> <li> <p>Click - Website opened when notification is clicked   Default: empty </p> </li> <li> <p>Delay - Timestamp or duration for delayed delivery, see https://docs.ntfy.sh/publish/#scheduled-delivery   Default: empty   Aliases: <code>at</code>, <code>in</code> </p> </li> <li> <p>Email - E-mail address for e-mail notifications   Default: empty </p> </li> <li> <p>Filename - File name of the attachment   Default: empty </p> </li> <li> <p>Firebase - Send to firebase   Default: \u2714 <code>yes</code> </p> </li> <li> <p>Icon - URL to use as notification icon   Default: empty </p> </li> <li> <p>Priority - Message priority with 1=min, 3=default and 5=max   Default: <code>default</code>   Possible values: <code>Min</code>, <code>Low</code>, <code>Default</code>, <code>High</code>, <code>Max</code> </p> </li> <li> <p>Scheme - Server protocol, http or https   Default: <code>https</code> </p> </li> <li> <p>Tags - List of tags that may or not map to emojis   Default: empty </p> </li> <li> <p>Title - Message title   Default: empty </p> </li> </ul>"},{"location":"services/opsgenie/","title":"OpsGenie","text":""},{"location":"services/opsgenie/#url_format","title":"URL Format","text":""},{"location":"services/opsgenie/#url_fields","title":"URL Fields","text":"<ul> <li>Host - The OpsGenie API host. Use 'api.eu.opsgenie.com' for EU instances   Default: <code>api.opsgenie.com</code>   URL part: <code>opsgenie://host:port/apikey/</code> </li> <li>Port - The OpsGenie API port.   Default: <code>443</code>   URL part: <code>opsgenie://host:port/apikey/</code> </li> <li>APIKey - The OpsGenie API key (Required)   URL part: <code>opsgenie://host:port/apikey/</code> </li> </ul>"},{"location":"services/opsgenie/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Actions - Custom actions that will be available for the alert   Default: empty </p> </li> <li> <p>Alias - Client-defined identifier of the alert   Default: empty </p> </li> <li> <p>Description - Description field of the alert   Default: empty </p> </li> <li> <p>Details - Map of key-value pairs to use as custom properties of the alert   Default: empty </p> </li> <li> <p>Entity - Entity field of the alert that is generally used to specify which domain the Source field of the alert   Default: empty </p> </li> <li> <p>Note - Additional note that will be added while creating the alert   Default: empty </p> </li> <li> <p>Priority - Priority level of the alert. Possible values are P1, P2, P3, P4 and P5   Default: empty </p> </li> <li> <p>Responders - Teams, users, escalations and schedules that the alert will be routed to send notifications   Default: empty </p> </li> <li> <p>Source - Source field of the alert   Default: empty </p> </li> <li> <p>Tags - Tags of the alert   Default: empty </p> </li> <li> <p>Title - notification title, optionally set by the sender   Default: empty </p> </li> <li> <p>User - Display name of the request owner   Default: empty </p> </li> <li> <p>VisibleTo - Teams and users that the alert will become visible to without sending any notification   Default: empty </p> </li> </ul>"},{"location":"services/opsgenie/#creating_a_rest_api_endpoint_in_opsgenie","title":"Creating a REST API endpoint in OpsGenie","text":"<ol> <li> <p>Open up the Integration List page by clicking on Settings =&gt; Integration List within the menu </p> </li> <li> <p>Click API =&gt; Add</p> </li> <li> <p>Make sure Create and Update Access and Enabled are checked and click Save Integration </p> </li> <li> <p>Copy the API Key</p> </li> <li> <p>Format the service URL</p> </li> </ol> <p>The host can be either api.opsgenie.com or api.eu.opsgenie.com depending on the location of your instance. See the OpsGenie documentation for details.</p> <pre><code>opsgenie://api.opsgenie.com/eb243592-faa2-4ba2-a551q-1afdf565c889\n                            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                           token\n</code></pre>"},{"location":"services/opsgenie/#passing_parameters_via_code","title":"Passing parameters via code","text":"<p>If you want to, you can pass additional parameters to the <code>send</code> function.  The following example contains all parameters that are currently supported.</p> <pre><code>service.Send(\"An example alert message\", &amp;types.Params{\n    \"alias\":       \"Life is too short for no alias\",\n    \"description\": \"Every alert needs a description\",\n    \"responders\":  `[{\"id\":\"4513b7ea-3b91-438f-b7e4-e3e54af9147c\",\"type\":\"team\"},{\"name\":\"NOC\",\"type\":\"team\"}]`,\n    \"visibleTo\":   `[{\"id\":\"4513b7ea-3b91-438f-b7e4-e3e54af9147c\",\"type\":\"team\"},{\"name\":\"rocket_team\",\"type\":\"team\"}]`,\n    \"actions\":     \"An action\",\n    \"tags\":        \"tag1 tag2\",\n    \"details\":     `{\"key1\": \"value1\", \"key2\": \"value2\"}`,\n    \"entity\":      \"An example entity\",\n    \"source\":      \"The source\",\n    \"priority\":    \"P1\",\n    \"user\":        \"Dracula\",\n    \"note\":        \"Here is a note\",\n})\n</code></pre>"},{"location":"services/opsgenie/#optional_parameters","title":"Optional parameters","text":"<p>You can optionally specify the parameters in the URL:</p> <p>opsgenie://api.opsgenie.com/eb243592-faa2-4ba2-a551q-1afdf565c889?alias=Life+is+too+short+for+no+alias&amp;description=Every+alert+needs+a+description&amp;actions=An+action&amp;tags=[\"tag1\",\"tag2\"]&amp;entity=An+example+entity&amp;source=The+source&amp;priority=P1&amp;user=Dracula&amp;note=Here+is+a+note</p> <p>Example using the command line:</p> <pre><code>shoutrrr send -u 'opsgenie://api.eu.opsgenie.com/token?tags=[\"tag1\",\"tag2\"]&amp;description=testing&amp;responders=[{\"username\":\"superuser\", \"type\": \"user\"}]&amp;entity=Example Entity&amp;source=Example Source&amp;actions=[\"asdf\", \"bcde\"]' -m \"Hello World6\"\n</code></pre>"},{"location":"services/opsgenie/config/","title":"Config","text":""},{"location":"services/opsgenie/config/#url_fields","title":"URL Fields","text":"<ul> <li>Host - The OpsGenie API host. Use 'api.eu.opsgenie.com' for EU instances   Default: <code>api.opsgenie.com</code>   URL part: <code>opsgenie://host:port/apikey/</code> </li> <li>Port - The OpsGenie API port.   Default: <code>443</code>   URL part: <code>opsgenie://host:port/apikey/</code> </li> <li>APIKey - The OpsGenie API key (Required)   URL part: <code>opsgenie://host:port/apikey/</code> </li> </ul>"},{"location":"services/opsgenie/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Actions - Custom actions that will be available for the alert   Default: empty </p> </li> <li> <p>Alias - Client-defined identifier of the alert   Default: empty </p> </li> <li> <p>Description - Description field of the alert   Default: empty </p> </li> <li> <p>Details - Map of key-value pairs to use as custom properties of the alert   Default: empty </p> </li> <li> <p>Entity - Entity field of the alert that is generally used to specify which domain the Source field of the alert   Default: empty </p> </li> <li> <p>Note - Additional note that will be added while creating the alert   Default: empty </p> </li> <li> <p>Priority - Priority level of the alert. Possible values are P1, P2, P3, P4 and P5   Default: empty </p> </li> <li> <p>Responders - Teams, users, escalations and schedules that the alert will be routed to send notifications   Default: empty </p> </li> <li> <p>Source - Source field of the alert   Default: empty </p> </li> <li> <p>Tags - Tags of the alert   Default: empty </p> </li> <li> <p>Title - notification title, optionally set by the sender   Default: empty </p> </li> <li> <p>User - Display name of the request owner   Default: empty </p> </li> <li> <p>VisibleTo - Teams and users that the alert will become visible to without sending any notification   Default: empty </p> </li> </ul>"},{"location":"services/pushbullet/","title":"Pushbullet","text":""},{"location":"services/pushbullet/#url_format","title":"URL Format","text":"<p>pushbullet://<code>api-token</code>[/<code>device</code>/#<code>channel</code>/<code>email</code>]</p>"},{"location":"services/pushbullet/#url_fields","title":"URL Fields","text":"<ul> <li>Token (Required)   URL part: <code>pushbullet://token/targets/</code> </li> <li>Targets (Required)   URL part: <code>pushbullet://token/targets/</code> </li> </ul>"},{"location":"services/pushbullet/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li>Title   Default: <code>Shoutrrr notification</code> </li> </ul>"},{"location":"services/pushbullet/config/","title":"Config","text":""},{"location":"services/pushbullet/config/#url_fields","title":"URL Fields","text":"<ul> <li>Token (Required)   URL part: <code>pushbullet://token/targets/</code> </li> <li>Targets (Required)   URL part: <code>pushbullet://token/targets/</code> </li> </ul>"},{"location":"services/pushbullet/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li>Title   Default: <code>Shoutrrr notification</code> </li> </ul>"},{"location":"services/pushover/","title":"Pushover","text":""},{"location":"services/pushover/#url_format","title":"URL Format","text":"<p>pushover://shoutrrr:<code>apiToken</code>@<code>userKey</code>/?devices=<code>device1</code>[,<code>device2</code>, ...]</p>"},{"location":"services/pushover/#url_fields","title":"URL Fields","text":"<ul> <li>Token - API Token/Key (Required)   URL part: <code>pushover://:token@user/</code> </li> <li>User - User Key (Required)   URL part: <code>pushover://:token@user/</code> </li> </ul>"},{"location":"services/pushover/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Devices   Default: empty </p> </li> <li> <p>Priority   Default: <code>0</code> </p> </li> <li> <p>Title   Default: empty </p> </li> </ul>"},{"location":"services/pushover/#getting_the_keys_from_pushover","title":"Getting the keys from Pushover","text":"<p>At your Pushover dashboard you can view your <code>userKey</code> in the top right. </p> <p>The <code>Name</code> column of the device list is what is used to refer to your devices (<code>device1</code> etc.) </p> <p>At the bottom of the same page there are links your applications, where you can find your <code>apiToken</code> </p> <p>The <code>apiToken</code> is displayed at the top of the application page. </p>"},{"location":"services/pushover/#optional_parameters","title":"Optional parameters","text":"<p>You can optionally specify the <code>title</code> and <code>priority</code> parameters in the URL: pushover://shoutrrr:__<code>token</code>@<code>userKey</code>/?devices=<code>device</code>__&amp;title=Custom+Title&amp;priority=1</p> <p>Note</p> <p>Only supply priority values between -1 and 1, since 2 requires additional parameters that are not supported yet.</p> <p>Please refer to the Pushover API documentation for more information.</p>"},{"location":"services/pushover/config/","title":"Config","text":""},{"location":"services/pushover/config/#url_fields","title":"URL Fields","text":"<ul> <li>Token - API Token/Key (Required)   URL part: <code>pushover://:token@user/</code> </li> <li>User - User Key (Required)   URL part: <code>pushover://:token@user/</code> </li> </ul>"},{"location":"services/pushover/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Devices   Default: empty </p> </li> <li> <p>Priority   Default: <code>0</code> </p> </li> <li> <p>Title   Default: empty </p> </li> </ul>"},{"location":"services/rocketchat/","title":"Rocket.chat","text":""},{"location":"services/rocketchat/#url_format","title":"URL Format","text":"<p>rocketchat://[<code>username</code>@]<code>rocketchat-host</code>/<code>token</code>[/<code>channel</code>|<code>@recipient</code>]*</p>"},{"location":"services/rocketchat/#url_fields","title":"URL Fields","text":"<ul> <li>UserName   Default: empty   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>Host (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>Port (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>TokenA (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>TokenB (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>Channel (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> </ul>"},{"location":"services/rocketchat/#queryparam_props","title":"Query/Param Props","text":"<p>The services does not support any query/param props</p>"},{"location":"services/rocketchat/#creating_a_webhook_in_rocketchat","title":"Creating a Webhook in Rocket.chat","text":"<ol> <li> <p>Open up the chat Administration by clicking on Administration menu </p> </li> <li> <p>Open Integrations and then click New </p> </li> <li> <p>Fill in the information for the webhook and click Save. Please don't forget to Enable your integration. </p> </li> <li> <p>If you did everything correctly, Rocket.chat will give you the URL and Token to your newly created webhook. </p> </li> <li> <p>Format the service URL</p> </li> </ol> <pre><code>rocketchat://your-domain.com/8eGdRzc9r4YYNyvge/2XYQcX9NBwJBKfQnphpebPcnXZcPEi32Nt4NKJfrnbhsbRfX\n                             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                           token\n</code></pre>"},{"location":"services/rocketchat/#additional_url_configuration","title":"Additional URL configuration","text":"<p>Rocket.chat provides functionality to post as another user or to another channel / user, compared to the webhook configuration.  To do this, you can add a sender and/or channel / receiver to the service URL.</p> <pre><code>rocketchat://shoutrrrUser@your-domain.com/8eGdRzc9r4YYNyvge/2XYQcX9NBwJBKfQnphpebPcnXZcPEi32Nt4NKJfrnbhsbRfX/shoutrrrChannel\n             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                sender                                                   token                                   channel\n\nrocketchat://shoutrrrUser@your-domain.com/8eGdRzc9r4YYNyvge/2XYQcX9NBwJBKfQnphpebPcnXZcPEi32Nt4NKJfrnbhsbRfX/@shoutrrrReceiver\n             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                sender                                                   token                                    receiver\n</code></pre>"},{"location":"services/rocketchat/#passing_parameters_via_code","title":"Passing parameters via code","text":"<p>If you want to, you also have the possibility to pass parameters to the <code>send</code> function.  The following example contains all parameters that are currently supported.</p> <pre><code>params := (*types.Params)(\n &amp;map[string]string{\n  \"username\": \"overwriteUserName\",\n  \"channel\": \"overwriteChannel\",\n },\n)\n\nservice.Send(\"this is a message\", params)\n</code></pre> <p>This will overwrite any options, that you passed via URL.</p> <p>For more Rocket.chat Webhooks options see official guide.</p>"},{"location":"services/rocketchat/config/","title":"Config","text":""},{"location":"services/rocketchat/config/#url_fields","title":"URL Fields","text":"<ul> <li>UserName   Default: empty   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>Host (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>Port (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>TokenA (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>TokenB (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>Channel (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> </ul>"},{"location":"services/rocketchat/config/#queryparam_props","title":"Query/Param Props","text":"<p>The services does not support any query/param props</p>"},{"location":"services/slack/","title":"Slack","text":"<p>New URL format</p> <p>The URL format for Slack has been changed to allow for API- as well as webhook tokens. Using the old format (<code>slack://xxxx/yyyy/zzzz</code>) will still work as before and will automatically be upgraded to the new format when used.</p> <p>The Slack notification service uses either Slack Webhooks or the Bot API to send messages.</p> <p>See the guides for information on how to get your token and channel.</p>"},{"location":"services/slack/#url_format","title":"URL Format","text":"<p>Note that the token uses a prefix to determine the type, usually either <code>hook</code> (for webhooks) or <code>xoxb</code> (for bot API).</p>"},{"location":"services/slack/#url_fields","title":"URL Fields","text":"<ul> <li>Token - API Bot token (Required)   URL part: <code>slack://token:token@channel/</code> </li> <li>Channel - Channel to send messages to in Cxxxxxxxxxx format (Required)   URL part: <code>slack://token:token@channel/</code> </li> </ul>"},{"location":"services/slack/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>BotName - Bot name   Default: empty   Aliases: <code>username</code> </p> </li> <li> <p>Color - Message left-hand border color   Default: empty </p> </li> <li> <p>Icon - Use emoji or URL as icon (based on presence of http(s):// prefix)   Default: empty   Aliases: <code>icon_emoji</code>, <code>icon_url</code> </p> </li> <li> <p>ThreadTS - ts value of the parent message (to send message as reply in thread)   Default: empty </p> </li> <li> <p>Title - Prepended text above the message   Default: empty </p> </li> </ul> <p>Color format</p> <p>The format for the <code>Color</code> prop follows the slack docs but <code>#</code> needs to be escaped as <code>%23</code> when passed in a URL. So <code>#ff8000</code> would be <code>%23ff8000</code> etc.</p>"},{"location":"services/slack/#examples","title":"Examples","text":"<p>Bot API</p> <pre><code>slack://xoxb:123456789012-1234567890123-4mt0t4l1YL3g1T5L4cK70k3N@C001CH4NN3L?color=good&amp;title=Great+News&amp;icon=man-scientist&amp;botname=Shoutrrrbot\n</code></pre> <p>Webhook</p> <pre><code>slack://hook:WNA3PBYV6-F20DUQND3RQ-Webc4MAvoacrpPakR8phF0zi@webhook?color=good&amp;title=Great+News&amp;icon=man-scientist&amp;botname=Shoutrrrbot\n</code></pre>"},{"location":"services/slack/config/","title":"Config","text":""},{"location":"services/slack/config/#url_fields","title":"URL Fields","text":"<ul> <li>Token - API Bot token (Required)   URL part: <code>slack://token:token@channel/</code> </li> <li>Channel - Channel to send messages to in Cxxxxxxxxxx format (Required)   URL part: <code>slack://token:token@channel/</code> </li> </ul>"},{"location":"services/slack/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>BotName - Bot name   Default: empty   Aliases: <code>username</code> </p> </li> <li> <p>Color - Message left-hand border color   Default: empty </p> </li> <li> <p>Icon - Use emoji or URL as icon (based on presence of http(s):// prefix)   Default: empty   Aliases: <code>icon_emoji</code>, <code>icon_url</code> </p> </li> <li> <p>ThreadTS - ts value of the parent message (to send message as reply in thread)   Default: empty </p> </li> <li> <p>Title - Prepended text above the message   Default: empty </p> </li> </ul>"},{"location":"services/smtp/config/","title":"Config","text":""},{"location":"services/smtp/config/#url_fields","title":"URL Fields","text":"<ul> <li>Username - SMTP server username   Default: empty   URL part: <code>smtp://username:password@host:port/</code> </li> <li>Password - SMTP server password or hash (for OAuth2)   Default: empty   URL part: <code>smtp://username:password@host:port/</code> </li> <li>Host - SMTP server hostname or IP address (Required)   URL part: <code>smtp://username:password@host:port/</code> </li> <li>Port - SMTP server port, common ones are 25, 465, 587 or 2525   Default: <code>25</code>   URL part: <code>smtp://username:password@host:port/</code> </li> </ul>"},{"location":"services/smtp/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>FromAddress - E-mail address that the mail are sent from (Required)   Aliases: <code>from</code> </p> </li> <li> <p>ToAddresses - List of recipient e-mails (Required)   Aliases: <code>to</code> </p> </li> <li> <p>Auth - SMTP authentication method   Default: <code>Unknown</code>   Possible values: <code>None</code>, <code>Plain</code>, <code>CRAMMD5</code>, <code>Unknown</code>, <code>OAuth2</code> </p> </li> <li> <p>ClientHost - SMTP client hostname   Default: <code>localhost</code> </p> </li> <li> <p>Encryption - Encryption method   Default: <code>Auto</code>   Possible values: <code>None</code>, <code>ExplicitTLS</code>, <code>ImplicitTLS</code>, <code>Auto</code> </p> </li> <li> <p>FromName - Name of the sender   Default: empty </p> </li> <li> <p>RequireStartTLS - Fail if StartTLS is enabled but unsupported   Default: \u274c <code>No</code> </p> </li> <li> <p>Subject - The subject of the sent mail   Default: <code>Shoutrrr Notification</code>   Aliases: <code>title</code> </p> </li> <li> <p>Timeout - Timeout for SMTP operations   Default: <code>10s</code> </p> </li> <li> <p>UseHTML - Whether the message being sent is in HTML   Default: \u274c <code>No</code> </p> </li> <li> <p>UseStartTLS - Whether to use StartTLS encryption   Default: \u2714 <code>Yes</code>   Aliases: <code>starttls</code> </p> </li> </ul>"},{"location":"services/teams/","title":"Teams","text":"<p>New webhook URL format only</p> <p>Shoutrrr now only supports the new Teams webhook URL format with an organization-specific domain.</p> <p>You must specify your organization domain using:</p> <p><pre><code>?host=example.webhook.office.com\n</code></pre> Where <code>example</code> is your organization's short name.</p> <p>Legacy webhook formats (e.g., <code>outlook.office.com</code>) are no longer supported.</p>"},{"location":"services/teams/#url_format","title":"URL Format","text":"<pre><code>teams://group@tenant/altId/groupOwner/extraId?host=organization.webhook.office.com[&amp;color=color][&amp;title=title]\n</code></pre> <p>Where:</p> <ul> <li><code>group</code>: The first UUID component from the webhook URL.</li> <li><code>tenant</code>: The second UUID component from the webhook URL.</li> <li><code>altId</code>: The third component (hex string) from the webhook URL.</li> <li><code>groupOwner</code>: The fourth UUID component from the webhook URL.</li> <li><code>extraId</code>: The fifth component at the end of the webhook URL.</li> <li><code>organization</code>: Your organization name for the webhook domain (required).</li> <li><code>color</code>: Optional hex color code for the message card (e.g., <code>FF0000</code> for red).</li> <li><code>title</code>: Optional title for the message card.</li> </ul>"},{"location":"services/teams/#url_fields","title":"URL Fields","text":"<ul> <li>Group   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> <li>Tenant   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> <li>AltID   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> <li>GroupOwner   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> <li>ExtraID   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> </ul>"},{"location":"services/teams/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Color   Default: empty </p> </li> <li> <p>Host   Default: empty </p> </li> <li> <p>Title   Default: empty </p> </li> </ul>"},{"location":"services/teams/#setting_up_a_webhook","title":"Setting up a webhook","text":"<p>To use the Microsoft Teams notification service, you need to set up a custom incoming webhook. Follow the instructions in this Microsoft guide.</p>"},{"location":"services/teams/#extracting_the_token","title":"Extracting the token","text":"<p>The token is extracted from your webhook URL:</p> <pre><code>https://&lt;organization&gt;.webhook.office.com/webhookb2/&lt;group&gt;@&lt;tenant&gt;/IncomingWebhook/&lt;altId&gt;/&lt;groupOwner&gt;/&lt;extraId&gt;</code></pre> <p>Important components</p> <p>All parts of the webhook URL are required:</p> <ul> <li><code>organization</code>: Your organization name (e.g., <code>contoso</code>).</li> <li><code>group</code>: First UUID component.</li> <li><code>tenant</code>: Second UUID component.</li> <li><code>altId</code>: Third component (hex string).</li> <li><code>groupOwner</code>: Fourth UUID component.</li> <li><code>extraId</code>: Fifth component.</li> </ul>"},{"location":"services/teams/#example","title":"Example","text":"<pre><code># Original webhook URL:\nhttps://contoso.webhook.office.com/webhookb2/11111111-4444-4444-8444-cccccccccccc@22222222-4444-4444-8444-cccccccccccc/IncomingWebhook/33333333012222222222333333333344/44444444-4444-4444-8444-cccccccccccc/V2ESyij_gAljSoUQHvZoZYzlpAoAXExyOl26dlf1xHEx05\n\n# Shoutrrr URL:\nteams://11111111-4444-4444-8444-cccccccccccc@22222222-4444-4444-8444-cccccccccccc/33333333012222222222333333333344/44444444-4444-4444-8444-cccccccccccc/V2ESyij_gAljSoUQHvZoZYzlpAoAXExyOl26dlf1xHEx05?host=contoso.webhook.office.com&amp;color=FF0000&amp;title=Alert\n</code></pre> <p>In this example:</p> <ul> <li><code>color=FF0000</code> sets a red theme.</li> <li><code>title=Alert</code> adds a custom title to the message card.</li> </ul>"},{"location":"services/teams/config/","title":"Config","text":""},{"location":"services/teams/config/#url_fields","title":"URL Fields","text":"<ul> <li>Group   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> <li>Tenant   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> <li>AltID   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> <li>GroupOwner   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> <li>ExtraID   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> </ul>"},{"location":"services/teams/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Color   Default: empty </p> </li> <li> <p>Host   Default: empty </p> </li> <li> <p>Title   Default: empty </p> </li> </ul>"},{"location":"services/telegram/","title":"Telegram","text":""},{"location":"services/telegram/#url_format","title":"URL Format","text":"<p>telegram://<code>token</code>@telegram?chats=<code>channel-1</code>[,<code>chat-id-1</code>,...]</p>"},{"location":"services/telegram/#url_fields","title":"URL Fields","text":"<ul> <li>Token (Required)   URL part: <code>telegram://token/</code> </li> </ul>"},{"location":"services/telegram/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Chats - Chat IDs or Channel names (using @channel-name) (Required)   Aliases: <code>channels</code> </p> </li> <li> <p>Notification - If disabled, sends Message silently   Default: \u2714 <code>Yes</code> </p> </li> <li> <p>ParseMode - How the text Message should be parsed   Default: <code>None</code>   Possible values: <code>None</code>, <code>Markdown</code>, <code>HTML</code>, <code>MarkdownV2</code> </p> </li> <li> <p>Preview - If disabled, no web page preview will be displayed for URLs   Default: \u2714 <code>Yes</code> </p> </li> <li> <p>Title - Notification title, optionally set by the sender   Default: empty </p> </li> </ul>"},{"location":"services/telegram/#getting_a_token_for_telegram","title":"Getting a token for Telegram","text":"<p>Talk to the botfather.</p>"},{"location":"services/telegram/#identifying_the_target_chatschannels","title":"Identifying the target chats/channels","text":"<p>The <code>chats</code> param consists of one or more <code>Chat ID</code>s or <code>channel name</code>s. </p>"},{"location":"services/telegram/#public_channels","title":"Public Channels","text":"<p>The channel names can be retrieved in the telegram client in the <code>Channel info</code> section for public channels.  Replace the <code>t.me/</code> prefix from the link with a <code>@</code>.</p> <p>Note</p> <p>Channels names need to be prefixed by <code>@</code> to identify them as such.</p> <p>Note</p> <p>If your channel only has an invite link (starting with <code>t.me/+</code>), you have to use it's Chat ID (see below)</p> <p>Note</p> <p>A <code>message_thread_id</code> param (reference) can be added, with the format of <code>$chat_id:$message_thread_id</code>. More info on how to obtain the <code>message_thread_id</code>.</p>"},{"location":"services/telegram/#chats","title":"Chats","text":"<p>Private channels, Group chats and private chats are identified by <code>Chat ID</code>s. Unfortunatly, they are generally not visible in the telegram clients. The easiest way to retrieve them is by using the <code>shoutrrr generate telegram</code> command which will guide you through creating a URL with your target chats.</p> <p>Tip</p> <p>You can use the <code>nickfedor/shoutrrr</code> image in docker to run it without download/installing the <code>shoutrrr</code> CLI using: <pre><code>docker run --rm -it nickfedor/shoutrrr generate telegram\n</code></pre></p>"},{"location":"services/telegram/#asking_shoutrrrbot","title":"Asking @shoutrrrbot","text":"<p>Another way of retrieving the Chat IDs, is by forwarding a message from the target chat to the @shoutrrrbot. It will reply with the Chat ID for the chat where the forwarded message was originally posted. Note that it will not work correctly for Group chats, as those messages are just seen as being posted by a user, not in a specific chat. Instead you can use the second method, which is to invite the @shoutrrrbot into your group chat and address a message to it (start the message with @shoutrrrbot). You can then safely kick the bot from the group. </p> <p>The bot should be constantly online, unless it's usage exceeds the free tier on GCP. It's source is available at github.com/nicholas-fedor/shoutrrrbot.</p>"},{"location":"services/telegram/#optional_parameters","title":"Optional parameters","text":"<p>You can optionally specify the <code>notification</code>, <code>parseMode</code> and <code>preview</code> parameters in the URL:  </p> <p><pre>telegram://<code>token</code>@<code>telegram</code>/?channels=<code>channel</code>&amp;notification=no&amp;preview=false&amp;parseMode=html</pre></p> <p>See the telegram documentation for more information.</p> <p>Note</p> <p><code>preview</code> and <code>notification</code> are inverted in regards to their API counterparts (<code>disable_web_page_preview</code> and <code>disable_notification</code>)</p>"},{"location":"services/telegram/#parse_mode_and_title","title":"Parse Mode and Title","text":"<p>If a parse mode is specified, the message needs to be escaped as per the corresponding sections in Formatting options.</p> <p>When a title has been specified, it will be prepended to the message, but this is only supported for the <code>HTML</code> parse mode. Note that, if no parse mode is specified, the message will be escaped and sent using <code>HTML</code>.</p> <p>Since the markdown modes are really hard to escape correctly, it's recommended to stick to <code>HTML</code> parse mode.</p>"},{"location":"services/telegram/config/","title":"Config","text":""},{"location":"services/telegram/config/#url_fields","title":"URL Fields","text":"<ul> <li>Token (Required)   URL part: <code>telegram://token/</code> </li> </ul>"},{"location":"services/telegram/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Chats - Chat IDs or Channel names (using @channel-name) (Required)   Aliases: <code>channels</code> </p> </li> <li> <p>Notification - If disabled, sends Message silently   Default: \u2714 <code>Yes</code> </p> </li> <li> <p>ParseMode - How the text Message should be parsed   Default: <code>None</code>   Possible values: <code>None</code>, <code>Markdown</code>, <code>HTML</code>, <code>MarkdownV2</code> </p> </li> <li> <p>Preview - If disabled, no web page preview will be displayed for URLs   Default: \u2714 <code>Yes</code> </p> </li> <li> <p>Title - Notification title, optionally set by the sender   Default: empty </p> </li> </ul>"},{"location":"services/zulip/","title":"Zulip Chat","text":""},{"location":"services/zulip/#url_format","title":"URL Format","text":"<p>The shoutrrr service URL should look like this:</p> <p>zulip://<code>botmail</code>:<code>botkey</code>@<code>host</code>/?stream=<code>stream</code>&amp;topic=<code>topic</code></p>"},{"location":"services/zulip/#url_fields","title":"URL Fields","text":"<ul> <li>BotMail - Bot e-mail address (Required)   URL part: <code>zulip://botmail:botkey@host:port/</code> </li> <li>BotKey - API Key (Required)   URL part: <code>zulip://botmail:botkey@host:port/</code> </li> <li>Host - API server hostname (Required)   URL part: <code>zulip://botmail:botkey@host:port/</code> </li> </ul>"},{"location":"services/zulip/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Stream   Default: empty </p> </li> <li> <p>Topic   Default: empty   Aliases: <code>title</code> </p> </li> </ul> <p>Note</p> <p>Since <code>botmail</code>  is a mail address you need to URL escape the <code>@</code> in it to <code>%40</code>.</p>"},{"location":"services/zulip/#examples","title":"Examples","text":"<p>Stream and topic are both optional and can be given as parameters to the Send method:</p> <pre><code>  sender, _ := shoutrrr.CreateSender(url)\n\n  params := make(types.Params)\n  params[\"stream\"] = \"mystream\"\n  params[\"topic\"] = \"This is my topic\"\n\n  sender.Send(message, &amp;params)\n</code></pre> <p>Example service URL</p> <p>zulip://my-bot%40zulipchat.com:correcthorsebatterystable@example.zulipchat.com?stream=foo&amp;topic=bar</p>"},{"location":"services/zulip/config/","title":"Config","text":""},{"location":"services/zulip/config/#url_fields","title":"URL Fields","text":"<ul> <li>BotMail - Bot e-mail address (Required)   URL part: <code>zulip://botmail:botkey@host:port/</code> </li> <li>BotKey - API Key (Required)   URL part: <code>zulip://botmail:botkey@host:port/</code> </li> <li>Host - API server hostname (Required)   URL part: <code>zulip://botmail:botkey@host:port/</code> </li> </ul>"},{"location":"services/zulip/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Stream   Default: empty </p> </li> <li> <p>Topic   Default: empty   Aliases: <code>title</code> </p> </li> </ul>"},{"location":"usage/","title":"Overview","text":"<p>Shoutrrr enables sending notifications to various services (e.g., Discord, Slack, Telegram) and can be used as a CLI tool, Go package, Docker container, or GitHub Action.</p>"},{"location":"usage/#cli_tool","title":"CLI Tool","text":"<p>Run commands like <code>send</code>, <code>generate</code>, <code>verify</code>, <code>docs</code>, <code>completion</code>, or <code>help</code> directly from the terminal.</p>"},{"location":"usage/#docker_container","title":"Docker Container","text":"<p>Use the lightweight Alpine-based Docker image (<code>nickfedor/shoutrrr</code> or <code>ghcr.io/nicholas-fedor/shoutrrr</code>) to run CLI commands in containerized environments.</p>"},{"location":"usage/#github_action","title":"GitHub Action","text":"<p>Send notifications from GitHub workflows using the <code>nicholas-fedor/shoutrrr-action</code> action.</p>"},{"location":"usage/#go_package","title":"Go Package","text":"<p>Integrate Shoutrrr into Go projects to send notifications programmatically using service URLs.</p>"},{"location":"usage/cli/","title":"Overview","text":"<p>Shoutrrr can be used via the CLI to both generate and verify service notification URL's, in addition to sending notifications.</p> Shoutrrr run without arguments<pre><code>shoutrrr\n</code></pre> Expected Output<pre><code>Shoutrrr CLI\n\nUsage:\n  shoutrrr [command]\n\nAvailable Commands:\n  completion  Generate the autocompletion script for the specified shell\n  docs        Print documentation for services\n  generate    Generates a notification service URL from user input\n  help        Help about any command\n  send        Send a notification using a service url\n  verify      Verify the validity of a notification service URL\n\nFlags:\n  -h, --help      help for shoutrrr\n  -v, --version   version for shoutrrr\n\nUse \"shoutrrr [command] --help\" for more information about a command.\n</code></pre>"},{"location":"usage/cli/completion/","title":"Completion","text":""},{"location":"usage/cli/completion/#overview","title":"Overview","text":"<p>The <code>completion</code> command generates a completion script for the specified shell.</p>"},{"location":"usage/cli/completion/#usage","title":"Usage","text":"Completion Command Syntax<pre><code>shoutrrr completion [SHELL]\n</code></pre>"},{"location":"usage/cli/completion/#available_options","title":"Available Options","text":"Shell Description <code>bash</code> Generate the completion script for the Bash shell <code>fish</code> Generate the completion script for the Fish shell <code>powershell</code> Generate the completion script for PowerShell <code>zsh</code> Generate the completion script for the ZSH shell"},{"location":"usage/cli/completion/#completion_script_installation","title":"Completion Script Installation","text":""},{"location":"usage/cli/completion/#bash","title":"Bash","text":"<ol> <li> <p>Save the completion script depending on your operating system and Bash configuration:</p> <pre><code>shoutrrr completions bash | sudo tee /usr/share/bash-completion/completions/shoutrrr &gt;/dev/null\n</code></pre> </li> <li> <p>Reload the Bash configuration to make it available to the current shell session:</p> <pre><code>source ~/.bashrc\n</code></pre> </li> </ol>"},{"location":"usage/cli/completion/#windows_powershell","title":"Windows PowerShell","text":"<ol> <li> <p>Save the completion script to a location of your preference:</p> <pre><code>Invoke-Expression \"shoutrrr.exe completions powershell | Out-File -FilePath $HOME\\Documents\\PowerShell\\Scripts\\shoutrrr_completion.ps1\"\n</code></pre> </li> <li> <p>Invoke the completion script within your PowerShell profile:</p> <pre><code>Add-Content -Path $PROFILE -Value '. $HOME\\Documents\\PowerShell\\Scripts\\shoutrrr.ps1'\n</code></pre> </li> <li> <p>Reload your PowerShell profile to invoke the change:</p> <pre><code>. $PROFILE\n</code></pre> </li> </ol>"},{"location":"usage/cli/docs/","title":"Docs","text":""},{"location":"usage/cli/docs/#overview","title":"Overview","text":"<p>The <code>docs</code> command prints documentation for the respective service.</p> <p>This is primarily used to generate service-specific information for the Shoutrrr website.</p>"},{"location":"usage/cli/docs/#usage","title":"Usage","text":"Docs Command Syntax<pre><code>shoutrrr docs [FLAG] &lt;SERVICE&gt;\n</code></pre>"},{"location":"usage/cli/docs/#flags","title":"Flags","text":"Flag Description <code>-f, --format string</code> Output format (default \"console\") <code>-h, --help</code> Help for <code>docs</code> command"},{"location":"usage/cli/docs/#output_formats","title":"Output Formats","text":"Format Description <code>console</code> Output to the terminal console <code>markdown</code> Output in Markdown format"},{"location":"usage/cli/docs/#examples","title":"Examples","text":""},{"location":"usage/cli/docs/#output_service_docs_to_console","title":"Output Service Docs to Console","text":"Print Discord service docs to console<pre><code>shoutrrr docs discord\n</code></pre> Expected Result<pre><code>Avatar     string          Override the webhook default avatar with specified URL       &lt;Aliases: avatarurl&gt;\nColor      uint            The color of the left border for plain messages              &lt;Default: 0x50D9ff&gt;\nColorDebug uint            The color of the left border for debug messages              &lt;Default: 0x7b00ab&gt;\nColorError uint            The color of the left border for error messages              &lt;Default: 0xd60510&gt;\nColorInfo  uint            The color of the left border for info messages               &lt;Default: 0x2488ff&gt;\nColorWarn  uint            The color of the left border for warning messages            &lt;Default: 0xffc441&gt;\nJSON       bool            Whether to send the whole message as the JSON payload instead of using it as the 'content' field  &lt;Default: No&gt;\nSplitLines bool            Whether to send each line as a separate embedded item        &lt;Default: Yes&gt;\nThreadID   string          The thread ID to send the message to\nTitle      string\nToken      string                                                                       &lt;URL: User&gt; &lt;Required&gt;\nUsername   string          Override the webhook default username\nWebhookID  string                                                                       &lt;URL: Host&gt; &lt;Required&gt;\n</code></pre>"},{"location":"usage/cli/docs/#output_markdown-formatted_service_docs","title":"Output Markdown-formatted Service Docs","text":"Print Discord service docs in markdown format<pre><code>shoutrrr docs --format markdown discord\n</code></pre> Expected Result<pre><code>### URL Fields\n\n*  __Token__ (**Required**)\n  URL part: &lt;code class=\"service-url\"&gt;discord://&lt;strong&gt;token&lt;/strong&gt;@webhookid/&lt;/code&gt;\n*  __WebhookID__ (**Required**)\n  URL part: &lt;code class=\"service-url\"&gt;discord://token@&lt;strong&gt;webhookid&lt;/strong&gt;/&lt;/code&gt;\n### Query/Param Props\n\nProps can be either supplied using the params argument, or through the URL using\n`?key=value&amp;key=value` etc.\n\n*  __Avatar__ - Override the webhook default avatar with specified URL\n  Default: *empty*\n  Aliases: `avatarurl`\n\n*  __Color__ - The color of the left border for plain messages\n  Default: `0x50D9ff`\n\n*  __ColorDebug__ - The color of the left border for debug messages\n  Default: `0x7b00ab`\n\n*  __ColorError__ - The color of the left border for error messages\n  Default: `0xd60510`\n\n*  __ColorInfo__ - The color of the left border for info messages\n  Default: `0x2488ff`\n\n*  __ColorWarn__ - The color of the left border for warning messages\n  Default: `0xffc441`\n\n*  __JSON__ - Whether to send the whole message as the JSON payload instead of using it as the 'content' field\n  Default: \u274c `No`\n\n*  __SplitLines__ - Whether to send each line as a separate embedded item\n  Default: \u2714 `Yes`\n\n*  __ThreadID__ - The thread ID to send the message to\n  Default: *empty*\n\n*  __Title__\n  Default: *empty*\n\n*  __Username__ - Override the webhook default username\n  Default: *empty*\n</code></pre>"},{"location":"usage/cli/generate/","title":"Generate","text":""},{"location":"usage/cli/generate/#overview","title":"Overview","text":"<p>The <code>generate</code> command creates a notification service URL by guiding the user through an interactive process or using provided properties. If no service is specified, the command displays the list of supported services and exits.</p>"},{"location":"usage/cli/generate/#usage","title":"Usage","text":"<pre><code>shoutrrr generate [FLAGS] &lt;SERVICE&gt; [GENERATOR]\n</code></pre> Flag Description <code>-g, --generator string</code> Specifies the generator to use (e.g., <code>basic</code>, <code>oauth2</code>, <code>telegram</code>). Defaults to a service-specific generator if available, or <code>basic</code> otherwise. <code>-p, --property stringArray</code> Provides configuration properties in <code>key=value</code> format (e.g., <code>token=abc123</code>). Multiple properties can be specified by repeating the flag. Invalid properties are reported but ignored. <code>-s, --service string</code> Specifies the notification service to generate a URL for (e.g., <code>discord</code>, <code>smtp</code>, <code>telegram</code>). Can also be provided as the first positional argument. <code>-x, --show-sensitive</code> Displays sensitive data (e.g., tokens, passwords) in the generated URL. By default, sensitive fields are masked with <code>REDACTED</code> for security. <p>Note</p> <p>The <code>SERVICE</code> can be supplied as the first positional argument or using the <code>-s</code> flag. The <code>GENERATOR</code> can be supplied as the second positional argument or using the <code>-g</code> flag. If no generator is specified, a service-specific generator is used if available; otherwise, the <code>basic</code> generator is used.</p>"},{"location":"usage/cli/generate/#generators","title":"Generators","text":""},{"location":"usage/cli/generate/#basic","title":"Basic","text":"<p>The default generator that dynamically prompts for service configuration fields.</p> <ul> <li>Inspects service struct tags (<code>key</code>, <code>desc</code>, <code>default</code>) to generate prompts.</li> <li>Handles required fields by reprompting if values are missing.</li> <li>Integrates with <code>-p</code> properties to skip prompts for prefilled fields.</li> </ul> <p>Example</p> <pre><code>shoutrrr generate discord -g basic\n</code></pre>"},{"location":"usage/cli/generate/#oauth2","title":"OAuth2","text":"<p>Specialized generator for OAuth2 authentication in SMTP services.</p> <ul> <li>Supports JSON credential files (specified as a positional argument) or interactive prompts for details like Client ID, Client Secret, and Auth URL.</li> <li>Generates an authentication URL and exchanges verification codes for access tokens.</li> <li>Configures Gmail-specific defaults (port 587, STARTTLS, sender email as <code>FromAddress</code> and <code>ToAddresses</code>).</li> </ul> <p>Example</p> <pre><code>shoutrrr generate smtp oauth2 -p provider=gmail credentials.json\n</code></pre>"},{"location":"usage/cli/generate/#telegram","title":"Telegram","text":"<p>Interactive generator tailored for Telegram bot and chat configuration.</p> <ul> <li>Prompts for bot token (from <code>@BotFather</code>) and fetches bot info.</li> <li>Listens for real-time messages to collect chat IDs (PMs, groups, channels).</li> <li>Supports dynamic chat addition via user interaction.</li> <li>Generates URL with token and selected chat IDs.</li> </ul> <p>Example</p> <pre><code>shoutrrr generate telegram -g telegram\n</code></pre>"},{"location":"usage/cli/generate/#properties","title":"Properties","text":"<p>Properties prefill configuration fields, reducing or eliminating interactive prompts. For example, <code>-p token=abc123</code> sets the token field without prompting.</p> <p>Example</p> <pre><code>shoutrrr generate discord -p token=abc123\n</code></pre>"},{"location":"usage/cli/generate/#services","title":"Services","text":"<p>Services like <code>telegram</code> and <code>smtp</code> (with <code>oauth2</code>) use specialized generators for a tailored experience, while others use the <code>basic</code> generator.</p> <p>Example</p> <pre><code>shoutrrr generate -s discord\n</code></pre>"},{"location":"usage/cli/generate/#show_sensitive","title":"Show Sensitive","text":"<p>Use this flag to view the full URL, including sensitive fields like tokens or passwords, for debugging or verification.</p> <p>Example</p> <pre><code>shoutrrr generate smtp oauth2 -x -p provider=gmail credentials.json\n</code></pre>"},{"location":"usage/cli/generate/#examples","title":"Examples","text":""},{"location":"usage/cli/generate/#generate_a_telegram_url_with_the_telegram_generator","title":"Generate a Telegram URL with the Telegram Generator","text":"<p>Example</p> <pre><code>shoutrrr generate telegram -g telegram\n</code></pre> <pre><code>To start we need your bot token. If you haven't created a bot yet, you can use this link:\n  https://t.me/botfather?start\n\nEnter your bot token: 110201543:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw\nFetching bot info...\n\nOkay! @MyBot will listen for any messages in PMs and group chats it is invited to.\nWaiting for messages to arrive...\nGot Message 'Hello' from @User in private chat -100123456789\nAdded new chat User!\nGot %0 chat ID(s) so far. Want to add some more? [Yes]: No\n</code></pre> <pre><code>Cleaning up the bot session...\nSelected chats:\n  -100123456789 (private) User\n\nURL: telegram://110201543:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw@telegram?chats=-100123456789\n</code></pre>"},{"location":"usage/cli/generate/#generate_a_discord_url_with_the_basic_generator","title":"Generate a Discord URL with the Basic Generator","text":"<p>Example</p> <pre><code>shoutrrr generate discord\n</code></pre> <pre><code>Generating URL for discord using basic generator\n\nToken: abc123\nWebhookID: 123456789\n</code></pre> <pre><code>URL: discord://abc123@123456789\n</code></pre>"},{"location":"usage/cli/generate/#generate_an_smtp_url_with_the_oauth2_generator_for_gmail","title":"Generate an SMTP URL with the OAuth2 Generator for Gmail","text":"<p>Example</p> <pre><code>shoutrrr generate smtp oauth2 -p provider=gmail credentials.json\n</code></pre> <pre><code>Generating URL for smtp using oauth2 generator\n\nVisit the following URL to authenticate:\nhttps://accounts.google.com/o/oauth2/auth?...\nEnter verification code: 4/0AX4Xf...\nEnter sender e-mail: user@example.com\n</code></pre> <pre><code>URL: smtp://user@example.com:REDACTED@smtp.gmail.com:587/?auth=OAuth2&amp;fromaddress=user@example.com&amp;toaddresses=user@example.com&amp;fromname=Shoutrrr&amp;usehtml=true&amp;usestarttls=true\n</code></pre>"},{"location":"usage/cli/help/","title":"Help","text":""},{"location":"usage/cli/help/#overview","title":"Overview","text":"<p>The <code>help</code> command provides general information about available commands for the Shoutrrr CLI.</p>"},{"location":"usage/cli/help/#usage","title":"Usage","text":"Help Command Syntax<pre><code>shoutrrr help\n</code></pre> Flag Description <code>-h, --help</code> Displays help for the Shoutrrr CLI or a specific command. <code>-v, --version</code> Displays the Shoutrrr version information."},{"location":"usage/cli/help/#example","title":"Example","text":"<p>Example</p> General Help Command<pre><code>shoutrrr help\n</code></pre> Expected Output<pre><code>Shoutrrr CLI\nUsage:\n  shoutrrr [command]\nAvailable Commands:\n  completion Generate the autocompletion script for the specified shell\n  docs Print documentation for services\n  generate Generates a notification service URL from user input\n  help Help about any command\n  send Send a notification using a service url\n  verify Verify the validity of a notification service URL\nFlags:\n  -h, --help help for shoutrrr\n  -v, --version version for shoutrrr\nUse \"shoutrrr [command] --help\" for more information about a command.\n</code></pre>"},{"location":"usage/cli/send/","title":"Send","text":""},{"location":"usage/cli/send/#overview","title":"Overview","text":"<p>The <code>send</code> command delivers a notification using one or more specified service URLs.</p>"},{"location":"usage/cli/send/#usage","title":"Usage","text":"Send Command Syntax<pre><code>shoutrrr send [FLAGS]\n</code></pre> Flag Description <code>-h, --help</code> Displays help for the <code>send</code> command. <code>-m, --message string</code> Specifies the message to send. Use <code>-</code> to read the message from stdin. <code>-t, --title string</code> Sets the title for services that support it (optional). <code>-u, --url stringArray</code> Specifies the notification service URL(s). Multiple URLs can be provided. <code>-v, --verbose</code> Enables verbose output, logging URLs, message, and title to stderr. <p>Note</p> <p>The <code>--url</code> and <code>--message</code> flags are required. Use <code>--message -</code> to read the message from stdin. Duplicate URLs are automatically removed.</p>"},{"location":"usage/cli/send/#url","title":"URL","text":"<ul> <li>Supports multiple service URLs, deduplicated before sending. URLs are parsed and services initialized accordingly.</li> </ul>"},{"location":"usage/cli/send/#message","title":"Message","text":"<ul> <li>The message body. If set to <code>-</code>, reads from stdin and logs the byte count read.</li> </ul>"},{"location":"usage/cli/send/#title","title":"Title","text":"<ul> <li>Optional title passed to services that support it.</li> </ul>"},{"location":"usage/cli/send/#verbose","title":"Verbose","text":"<ul> <li>Enables detailed logging: lists URLs (with indentation for multiples), truncated message (up to 100 characters with ellipsis), title if provided, and \"Notification sent\" upon success.</li> </ul>"},{"location":"usage/cli/send/#examples","title":"Examples","text":""},{"location":"usage/cli/send/#send_a_notification_to_a_single_service_url","title":"Send a Notification to a Single Service URL","text":"<p>Example</p> Send Command with Discord URL<pre><code>shoutrrr send --url \"discord://abc123@123456789\" --message \"Hello, Discord!\"\n</code></pre> Expected Output<pre><code>Notification sent\n</code></pre>"},{"location":"usage/cli/send/#send_a_notification_with_a_title","title":"Send a Notification with a Title","text":"<p>Example</p> Send Command with Title<pre><code>shoutrrr send --url \"discord://abc123@123456789\" --message \"Hello, Discord!\" --title \"Test Notification\"\n</code></pre> Expected Output<pre><code>Notification sent\n</code></pre>"},{"location":"usage/cli/send/#send_a_notification_with_verbose_output","title":"Send a Notification with Verbose Output","text":"<p>Example</p> Send Command with Verbose Output<pre><code>shoutrrr send --url \"discord://abc123@123456789\" --message \"Hello, Discord!\" --verbose\n</code></pre> Expected Output<pre><code>URLs: discord://abc123@123456789\nMessage: Hello, Discord!\nNotification sent\n</code></pre>"},{"location":"usage/cli/send/#send_a_notification_with_message_from_stdin","title":"Send a Notification with Message from Stdin","text":"<p>Example</p> Send Command with Stdin Input<pre><code>echo \"Hello from stdin!\" | shoutrrr send --url \"discord://abc123@123456789\" --message -\n</code></pre> Expected Output<pre><code>Reading from STDIN...\nRead 18 byte(s)\nNotification sent\n</code></pre>"},{"location":"usage/cli/send/#send_to_multiple_urls_with_deduplication","title":"Send to Multiple URLs with Deduplication","text":"<p>Example</p> Send Command with Multiple URLs<pre><code>shoutrrr send --url \"discord://abc123@123456789\" --url \"discord://abc123@123456789\" --message \"Hello!\"\n</code></pre> Expected Output<pre><code>Notification sent\n</code></pre>"},{"location":"usage/cli/send/#send_with_verbose_and_multiple_urls","title":"Send with Verbose and Multiple URLs","text":"<p>Example</p> Send Command with Verbose and Multiple URLs<pre><code>shoutrrr send --url \"discord://abc123@123456789\" --url \"slack://token@team/channel\" --message \"Hello!\" --verbose\n</code></pre> Expected Output<pre><code>URLs: discord://abc123@123456789\n      slack://token@team/channel\nMessage: Hello!\nNotification sent\nNotification sent\n</code></pre>"},{"location":"usage/cli/verify/","title":"Verify","text":""},{"location":"usage/cli/verify/#overview","title":"Overview","text":"<p>The <code>verify</code> command checks the validity of a notification service URL.</p>"},{"location":"usage/cli/verify/#usage","title":"Usage","text":"Verify Command Syntax<pre><code>shoutrrr verify [FLAGS]\n</code></pre> Flag Description <code>-h, --help</code> Displays help for the <code>verify</code> command. <code>-u, --url string</code> Specifies the notification service URL to verify. <p>Note</p> <p>The <code>--url</code> flag is required. The command validates the URL format and service configuration, reporting errors for issues like unknown services or invalid URL formats.</p>"},{"location":"usage/cli/verify/#url","title":"URL","text":"<ul> <li>Specifies the service URL to validate. The URL is parsed to identify the service, and its configuration is checked for correctness.</li> </ul>"},{"location":"usage/cli/verify/#examples","title":"Examples","text":""},{"location":"usage/cli/verify/#verify_a_valid_discord_url","title":"Verify a Valid Discord URL","text":"<p>Example</p> Verify Discord URL<pre><code>shoutrrr verify --url \"discord://abc123@123456789\"\n</code></pre> Expected Output<pre><code>Token: abc123\nWebhookID: 123456789\n</code></pre>"},{"location":"usage/cli/verify/#verify_an_invalid_url","title":"Verify an Invalid URL","text":"<p>Example</p> Verify Invalid URL<pre><code>shoutrrr verify --url \"invalid://abc123\"\n</code></pre> Expected Output<pre><code>error verifying URL: service not recognized\n</code></pre>"},{"location":"usage/cli/verify/#verify_a_malformed_url","title":"Verify a Malformed URL","text":"<p>Example</p> Verify Malformed URL<pre><code>shoutrrr verify --url \"discord://\"\n</code></pre> Expected Output<pre><code>error verifying URL: invalid URL format\n</code></pre>"},{"location":"usage/docker/","title":"Using Shoutrrr as a Docker Container","text":""},{"location":"usage/docker/#overview","title":"Overview","text":"<p>The Shoutrrr Docker image provides a lightweight containerized version of the Shoutrrr CLI, built on Alpine Linux for minimal size and broad compatibility. It supports all architectures (amd64, arm64, arm/v6, i386, riscv64) and is available on Docker Hub (<code>nickfedor/shoutrrr</code>) and GHCR (<code>ghcr.io/nicholas-fedor/shoutrrr</code>). Tags include <code>latest</code> (stable production), versioned tags (e.g., <code>v0.8.0</code>), and <code>latest-dev</code> (development snapshots).</p>"},{"location":"usage/docker/#usage","title":"Usage","text":"Docker HubGHCR Pull Command Syntax<pre><code>docker pull nickfedor/shoutrrr:latest\n</code></pre> Pull Command Syntax<pre><code>docker pull ghcr.io/nicholas-fedor/shoutrrr:latest\n</code></pre> <p>Run Shoutrrr CLI commands inside the container using <code>docker run</code>.</p> <p>The entrypoint is <code>/shoutrrr</code>, so commands like <code>send</code>, <code>generate</code>, <code>verify</code> work directly.</p> Tag Examples Description <code>latest</code> Latest stable release. <code>vX.Y.Z</code> Specific version (e.g., <code>v0.8.0</code>). <code>latest-dev</code> Latest development snapshot. <code>amd64-latest</code> Platform-specific (e.g., amd64, arm64v8). <p>Note</p> <p>The image includes CA certificates and timezone data. No volumes are required by default, but mount if needed for custom configs or stdin input. Environment variables can override flags (e.g., <code>SHOUTRRR_URL</code> for <code>--url</code>).</p>"},{"location":"usage/docker/#environment_variables","title":"Environment Variables","text":"<ul> <li>Use uppercase flag names prefixed with <code>SHOUTRRR_</code> (e.g., <code>SHOUTRRR_MESSAGE</code> for <code>--message</code>).</li> </ul>"},{"location":"usage/docker/#examples","title":"Examples","text":""},{"location":"usage/docker/#send_a_notification","title":"Send a Notification","text":"<p>Example</p> Send to Discord<pre><code>docker run --rm nickfedor/shoutrrr:latest send --url \"discord://abc123@123456789\" --message \"Hello, Docker!\"\n</code></pre> Expected Output<pre><code>Notification sent\n</code></pre>"},{"location":"usage/docker/#generate_a_service_url","title":"Generate a Service URL","text":"<p>Example</p> Generate Discord URL<pre><code>docker run --rm -it nickfedor/shoutrrr:latest generate discord\n</code></pre> Expected Prompt Inputs<pre><code>Generating URL for discord using basic generator\n\nToken: abc123\nWebhookID: 123456789\n</code></pre> Expected Output<pre><code>URL: discord://abc123@123456789\n</code></pre>"},{"location":"usage/docker/#verify_a_url_with_verbose_output","title":"Verify a URL with Verbose Output","text":"<p>Example</p> Verify Slack URL<pre><code>docker run --rm nickfedor/shoutrrr:latest verify --url \"slack://token-a/token-b/token-c\"\n</code></pre> Expected Output<pre><code>URL valid\n</code></pre>"},{"location":"usage/docker/#send_from_stdin_with_environment_variables","title":"Send from Stdin with Environment Variables","text":"<p>Example</p> Send with Env Vars and Stdin<pre><code>echo \"Message from stdin\" | docker run --rm -i -e SHOUTRRR_URL=\"slack://token-a/token-b/token-c\" -e SHOUTRRR_MESSAGE=\"-\" nickfedor/shoutrrr:latest send\n</code></pre> Expected Output<pre><code>Reading from STDIN...\nRead 20 byte(s)\nNotification sent\n</code></pre>"},{"location":"usage/docker/#multi-architecture_pull_and_run","title":"Multi-Architecture Pull and Run","text":"<p>Example</p> Pull and Run on ARM64<pre><code>docker pull nickfedor/shoutrrr:arm64v8-latest\ndocker run --rm nickfedor/shoutrrr:arm64v8-latest --version\n</code></pre> Expected Output<pre><code>shoutrrr version latest\n</code></pre>"},{"location":"usage/docker/#notes","title":"Notes","text":"<ul> <li>Multi-Architecture: Use platform-specific tags (e.g., <code>arm64v8-latest</code>) or let Docker select automatically with <code>latest</code>.</li> <li>Timeouts: Inherits Shoutrrr's 10-second send timeout.</li> <li>Volumes: Mount <code>/etc/ssl/certs</code> if custom CA certs are needed, or <code>/input</code> for file-based messages.</li> <li>Updates: Pull latest images regularly. For production, pin to versioned tags.</li> <li>Debugging: Add <code>-v</code> for verbose output in commands.</li> </ul>"},{"location":"usage/github-action/","title":"Using Shoutrrr as a GitHub Action","text":""},{"location":"usage/github-action/#overview","title":"Overview","text":"<p>The Shoutrrr GitHub Action (<code>nicholas-fedor/shoutrrr-action</code>) integrates Shoutrrr into your workflows to send notifications using service URLs. It supports all Shoutrrr services and allows dynamic messaging with GitHub context variables.</p>"},{"location":"usage/github-action/#usage","title":"Usage","text":"<p>Add the action to your <code>.github/workflows</code> YAML file.</p> Workflow Syntax Example<pre><code>- name: Shoutrrr\n  uses: nicholas-fedor/shoutrrr-action@v1\n  with:\n    url: &lt;SERVICE_URL&gt;\n    title: &lt;NOTIFICATION_TITLE&gt;\n    message: &lt;NOTIFICATION_MESSAGE&gt;\n</code></pre> Input Description Required <code>url</code> The Shoutrrr service URL (e.g., <code>discord://token@webhookid</code>). Use secrets for sensitive data. Yes <code>title</code> The notification title (optional, for services that support it). No <code>message</code> The notification message body. Yes <p>Note</p> <p>Use GitHub secrets for URLs containing tokens. The action uses <code>shoutrrr send</code> internally, supporting all services like <code>discord</code>, <code>slack</code>, <code>telegram</code>, etc. Messages can include GitHub variables (e.g., <code>${{ github.sha }}</code>).</p>"},{"location":"usage/github-action/#examples","title":"Examples","text":""},{"location":"usage/github-action/#send_notification_on_push_to_main","title":"Send Notification on Push to Main","text":"<p>Example</p> Deploy Workflow with Shoutrrr<pre><code>name: Deploy\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - [Your other workflow steps]\n\n      - name: Shoutrrr\n        uses: nicholas-fedor/shoutrrr-action@v1\n        with:\n          url: ${{ secrets.SHOUTRRR_URL }}\n          title: Deployed ${{ github.sha }}\n          message: See changes at ${{ github.event.compare }}.\n</code></pre> Expected Output (Success)<pre><code>Notification sent\n</code></pre>"},{"location":"usage/github-action/#send_on_pull_request_with_custom_message","title":"Send on Pull Request with Custom Message","text":"<p>Example</p> PR Workflow with Shoutrrr<pre><code>name: PR Notification\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  notify:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Shoutrrr\n        uses: nicholas-fedor/shoutrrr-action@v1\n        with:\n          url: ${{ secrets.DISCORD_URL }}\n          title: New PR #${{ github.event.number }}\n          message: \"${{ github.event.pull_request.title }} by ${{ github.actor }}: ${{ github.event.pull_request.html_url }}\"\n</code></pre> Expected Output (Success)<pre><code>Notification sent\n</code></pre>"},{"location":"usage/github-action/#send_on_failure_with_verbose_logging","title":"Send on Failure with Verbose Logging","text":"<p>Example</p> Failure Notification with Verbose<pre><code>name: Build\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - [Build steps]\n\n      - name: Notify on Failure\n        if: failure()\n        uses: nicholas-fedor/shoutrrr-action@v1\n        with:\n          url: ${{ secrets.SLACK_URL }}\n          title: Build Failed\n          message: \"Build failed for ${{ github.ref }}. Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"\n</code></pre> Expected Output (Success)<pre><code>Notification sent\n</code></pre>"},{"location":"usage/github-action/#notes","title":"Notes","text":"<ul> <li>Error Handling: If sending fails, the action logs errors and may fail the step. Use <code>continue-on-error: true</code> if needed.</li> <li>Parameters: The action passes <code>title</code> and <code>message</code> to <code>shoutrrr send</code>. For service-specific params, embed them in the URL.</li> <li>Timeouts: Inherits Shoutrrr's 10-second send timeout.</li> <li>Digest Pinning: Pin to a specific SHA digest (e.g., <code>@caad2fd0be5099bbc16825bc8f71f9ff8e544ffe</code>) to maintain security best practices.</li> </ul>"},{"location":"usage/go-package/","title":"Using the Shoutrrr Package","text":""},{"location":"usage/go-package/#overview","title":"Overview","text":"<p>The Shoutrrr Go package (<code>github.com/nicholas-fedor/shoutrrr</code>) enables sending notifications to various services (e.g., <code>discord</code>, <code>slack</code>, <code>telegram</code>, <code>smtp</code>, etc.) using service URLs. It provides two primary methods: a direct <code>Send</code> function for simple use cases and a <code>Sender</code> struct for advanced scenarios with multiple URLs, message queuing, and parameter customization.</p>"},{"location":"usage/go-package/#usage","title":"Usage","text":"Go Import Statement<pre><code>import \"github.com/nicholas-fedor/shoutrrr\"\n</code></pre>"},{"location":"usage/go-package/#direct_send","title":"Direct Send","text":"<p>Sends a notification to a single service URL with an optional parameters map.</p> <ul> <li>Function: <code>shoutrrr.Send(url string, message string, params ...map[string]string) []error</code></li> <li>Behavior: Initializes a service from the provided URL, sends the message, and returns any errors. If a <code>params</code> map is provided, it customizes the notification (e.g., setting a title).</li> </ul> <p>Example</p> Send to a Single Slack URL<pre><code>url := \"slack://token-a/token-b/token-c\"\nerrs := shoutrrr.Send(url, \"Hello, Slack!\")\nif len(errs) &gt; 0 {\n    // Handle errors\n    for _, err := range errs {\n        fmt.Println(\"Error:\", err)\n    }\n}\n</code></pre>"},{"location":"usage/go-package/#sender","title":"Sender","text":"<p>Creates a <code>Sender</code> (<code>*ServiceRouter</code>) to manage multiple service URLs, support message queuing, and allow parameter customization.</p> <ul> <li>Function: <code>shoutrrr.CreateSender(urls ...string) (*ServiceRouter, error)</code></li> <li>Methods:</li> <li><code>Send(message string, params map[string]string) []error</code>: Sends a message to all configured services.</li> <li><code>Enqueue(message string, a ...interface{})</code>: Queues a formatted message for later sending.</li> <li><code>Flush(params map[string]string) []error</code>: Sends all queued messages and resets the queue.</li> <li>Behavior: Deduplicates URLs, initializes services, and supports asynchronous sending with a 10-second timeout per service.</li> </ul> <p>Example</p> Create Sender with Multiple URLs<pre><code>urls := []string{\n    \"slack://token-a/token-b/token-c\",\n    \"telegram://110201543:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw@telegram?channels=@mychannel\",\n}\nsender, err := shoutrrr.CreateSender(urls...)\nif err != nil {\n    log.Fatal(err)\n}\nparams := map[string]string{\"title\": \"Test Notification\"}\nerrs := sender.Send(\"Hello, world!\", params)\nif len(errs) &gt; 0 {\n    for _, err := range errs {\n        fmt.Println(\"Error:\", err)\n    }\n}\n</code></pre>"},{"location":"usage/go-package/#message_queuing","title":"Message Queuing","text":"<p>Allows queuing messages for deferred sending, useful for aggregating notifications during a process.</p> <ul> <li>Queues messages with <code>Enqueue</code> and sends them with <code>Flush</code>. Queued messages use the <code>params</code> provided during <code>Flush</code>.</li> </ul> <p>Example</p> Queue and Flush Notifications<pre><code>url := \"discord://abc123@123456789\"\nsender, err := shoutrrr.CreateSender(url)\nif err != nil {\n    log.Fatal(err)\n}\ndefer sender.Flush(map[string]string{\"title\": \"Work Result\"})\n\nsender.Enqueue(\"Started doing work\")\nif err := doWork(); err != nil {\n    sender.Enqueue(\"Error: %v\", err)\n    return\n}\nsender.Enqueue(\"Work completed successfully!\")\n</code></pre>"},{"location":"usage/go-package/#examples","title":"Examples","text":""},{"location":"usage/go-package/#send_with_parameters_and_error_handling","title":"Send with Parameters and Error Handling","text":"<p>Example</p> Send with Title and Error Handling<pre><code>url := \"discord://abc123@123456789\"\nparams := map[string]string{\"title\": \"Alert\"}\nerrs := shoutrrr.Send(url, \"System alert!\", params)\nif len(errs) &gt; 0 {\n    for _, err := range errs {\n        fmt.Println(\"Error:\", err)\n    }\n}\n</code></pre> Expected Output (Success)<pre><code>(No output on success)\n</code></pre> Expected Output (Error)<pre><code>Error: failed to send message: unexpected response status code\n</code></pre>"},{"location":"usage/go-package/#send_to_multiple_services_with_queuing","title":"Send to Multiple Services with Queuing","text":"<p>Example</p> Queue Messages for Multiple Services<pre><code>urls := []string{\n    \"slack://token-a/token-b/token-c\",\n    \"discord://abc123@123456789\",\n}\nsender, err := shoutrrr.CreateSender(urls...)\nif err != nil {\n    log.Fatal(err)\n}\nstart := time.Now()\ndefer sender.Flush(map[string]string{\"title\": \"Task Summary\"})\nsender.Enqueue(\"Task started\")\ntime.Sleep(time.Second)\nsender.Enqueue(\"Task finished in %v\", time.Now().Sub(start))\n</code></pre> Expected Output (Success)<pre><code>(No output on success)\n</code></pre> Expected Output (Error)<pre><code>Error: failed to initialize service: invalid URL format\n</code></pre>"},{"location":"usage/go-package/#notes","title":"Notes","text":"<ul> <li>Error Handling: Both <code>Send</code> and <code>Sender.Send</code> return a slice of errors, one per service. Check <code>len(errs) &gt; 0</code> to handle failures.</li> <li>Parameters: The <code>params</code> map supports service-specific options (e.g., <code>title</code> for Discord, Slack). Use <code>shoutrrr docs</code> to view supported parameters for each service.</li> <li>Timeouts: Each service send operation has a 10-second timeout.</li> <li>Deduplication: Duplicate URLs are automatically removed when creating a <code>Sender</code>.</li> </ul>"}]}